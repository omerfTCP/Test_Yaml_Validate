openapi: 3.0.0
info:
  title: 'Portal 2.0 API'
  description: 'The Credit Pros - DEV Portal 2.1 API'
  termsOfService: 'http://www.thecreditpros.com/terms/'
  contact:
    name: 'TCP API Support'
    email: apiteam@thecreditpros.com
  version: '1.1'
servers:
  -
    url: 'https://api-dev2.thecreditpros.com/portal2admin'
    description: 'AWS GW Dev Environment'
paths:
  /api/account_responsibility_add:
    post:
      tags:
        - 'Account Responsibilities'
      summary: 'Add Account Responsibility'
      description: "Save the Account Responsibilities by providing a Bearer token in the 'Authorization' header."
      operationId: saveAccountResponsibility
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAccountResponsibilityRequest'
      responses:
        200:
          description: 'Account Responsibilities saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveAccountResponsibilityResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_responsibility_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/account_responsibility_update/{accountResponId}':
    post:
      tags:
        - 'Account Responsibilities'
      summary: 'Update Account Responsibility'
      description: "Update the Account Responsibility by providing a Bearer token in the 'Authorization' header."
      operationId: accountResponsibilityUpdate
      parameters:
        -
          name: accountResponId
          in: path
          description: 'accountRespon ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/accountResponsibilityUpdateRequest'
      responses:
        200:
          description: 'Account Responsibility updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccountResponsibilityResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_responsibility_update/{accountResponId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountResponId: method.request.querystring.accountResponId
        passthroughBehavior: when_no_match
        type: http
  '/api/account_responsibility/{accountResponId}':
    delete:
      tags:
        - 'Account Responsibilities'
      summary: 'Delete a Account Responsibility by ID'
      description: 'Delete a Account Responsibility by specifying the ID.'
      operationId: accountResponsibilityDestroy
      parameters:
        -
          name: accountResponId
          in: path
          description: 'ID of the Account Responsibility to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Responsibility deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountResponsibilityDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_responsibility/{accountResponId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountResponId: method.request.querystring.accountResponId
        passthroughBehavior: when_no_match
        type: http
  /api/get_account_responsibilities:
    get:
      tags:
        - 'Account Responsibilities'
      summary: 'Get all Account Responsibilities'
      description: "Retrieve Account Responsibilities by providing a Bearer token in the 'Authorization' header."
      operationId: getAllAccountResponsibilities
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Responsibilities listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllAccountResponsibilitiesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_account_responsibilities'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/account_status:
    post:
      tags:
        - 'Account Status'
      summary: 'Get all AccountStatus'
      description: "Retrieve Account Status by providing a Bearer token in the 'Authorization' header."
      operationId: getAccountStatus
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/getAccountStatusRequest'
      responses:
        200:
          description: 'Account Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/account_status_add:
    post:
      tags:
        - 'Account Status'
      summary: 'Add Account Status'
      description: "Save the Account Status by providing a Bearer token in the 'Authorization' header."
      operationId: saveAccountStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAccountStatusRequest'
      responses:
        200:
          description: 'Account Status saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveAccountStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/account_status_update/{accountStatusId}':
    post:
      tags:
        - 'Account Status'
      summary: 'Update Account Status'
      description: "Update the Account Status by providing a Bearer token in the 'Authorization' header."
      operationId: accountStatusUpdate
      parameters:
        -
          name: accountStatusId
          in: path
          description: 'ID of the filter to update Account Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/accountStatusUpdateRequest'
      responses:
        200:
          description: 'Account Status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_status_update/{accountStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountStatusId: method.request.querystring.accountStatusId
        passthroughBehavior: when_no_match
        type: http
  '/api/account_status/{accountStatusId}':
    delete:
      tags:
        - 'Account Status'
      summary: 'Delete a Account Status by ID'
      description: 'Delete a Account Status by specifying the ID.'
      operationId: accountStatusDestroy
      parameters:
        -
          name: accountStatusId
          in: path
          description: 'ID of the Account Status to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountStatusDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_status/{accountStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountStatusId: method.request.querystring.accountStatusId
        passthroughBehavior: when_no_match
        type: http
  /api/get_account_status:
    get:
      tags:
        - 'Account Status'
      summary: 'Get all Account Status'
      description: "Retrieve Account Status by providing a Bearer token in the 'Authorization' header."
      operationId: getAllAccountStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllAccountStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_account_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/account_types:
    post:
      tags:
        - 'Account Type'
      summary: 'Get all AccountTypes'
      description: "Retrieve Account Types by providing a Bearer token in the 'Authorization' header."
      operationId: getAccountTypes
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Account Types listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountTypesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_types'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/account_type_add:
    post:
      tags:
        - 'Account Type'
      summary: 'Add Account Type'
      description: "Save the Account Type by providing a Bearer token in the 'Authorization' header."
      operationId: saveAccountType
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAccountTypeRequest'
      responses:
        200:
          description: 'Account Type saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveAccountTypeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_types'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/account_type_update/{accountTypesId}':
    post:
      tags:
        - 'Account Type'
      summary: 'Update Account Type'
      description: "Update the Account Type by providing a Bearer token in the 'Authorization' header."
      operationId: AccountTypeUpdate
      parameters:
        -
          name: accountTypesId
          in: path
          description: 'ID of the filter to update Account Type'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAccountTypeRequest'
      responses:
        200:
          description: 'Account Type updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTypeUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_type_update/{accountTypesId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountTypesId: method.request.querystring.accountTypesId
        passthroughBehavior: when_no_match
        type: http
  '/api/account_type/{accountTypeId}':
    delete:
      tags:
        - 'Account Type'
      summary: 'Delete a Account type by ID'
      description: 'Delete a Account type by specifying the ID.'
      operationId: accountTypesDestroy
      parameters:
        -
          name: accountTypeId
          in: path
          description: 'ID of the Account type to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Type deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountTypesDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/account_type/{accountTypeId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.accountTypeId: method.request.querystring.accountTypeId
        passthroughBehavior: when_no_match
        type: http
  /api/get_account_types:
    get:
      tags:
        - 'Account Type'
      summary: 'Get all Account Types'
      description: "Retrieve Account Types by providing a Bearer token in the 'Authorization' header."
      operationId: getAllAccountTypes
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Account Types listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllAccountTypesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_account_types'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/item_activity/{clientid}/{itemid}':
    get:
      tags:
        - Activity
      summary: 'Get all Item Activities'
      description: "Retrieve item activities by providing a Bearer token in the 'Authorization' header."
      operationId: getItemActivity
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: itemid
          in: path
          description: 'Item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item activity listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getItemActivityResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item_activity/{clientid}/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.path.itemid: method.request.querystring.itemid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_activity/{clientid}':
    get:
      tags:
        - Activity
      summary: 'Get all Client Activities'
      description: "Retrieve client activities by providing a Bearer token in the 'Authorization' header."
      operationId: ClientActivity
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client activity listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostClientActivityResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_activity/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_activity_export/{clientid}':
    get:
      tags:
        - Activity
      summary: 'Get Client Export Activities'
      description: "Client activities exports by providing a Bearer token in the 'Authorization' header."
      operationId: clientActivityExport
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client activity exports successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientActivityExportResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_activity_export/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/totalActivity/{clientid}':
    post:
      tags:
        - Activity
      summary: 'Get Client Total Activities'
      description: "Total client activities by providing a Bearer token in the 'Authorization' header."
      operationId: totalActivity
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/totalActivityRequest'
      responses:
        200:
          description: 'Activity listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/totalActivityResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/totalActivity/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/totalActivityExport/{clientid}':
    post:
      tags:
        - Activity
      summary: 'Export Total Activities'
      description: "Export total activities by providing a Bearer token in the 'Authorization' header."
      operationId: totalActivityExport
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/totalActivityExportRequest'
      responses:
        200:
          description: 'Activity exports successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/totalActivityExportResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/totalActivityExport/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/agreement_snippits:
    post:
      tags:
        - Snippits
      summary: 'Get all agreement snippits'
      description: "Retrieve a filtered agreement snippits by providing a Bearer token in the 'Authorization' header."
      operationId: agreementSnippitsListing
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Agreement snippits retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agreementSnippitsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/agreement_snippits'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_snippit:
    post:
      tags:
        - Snippits
      summary: 'Add agreement snippit'
      description: "Save the agreement snippit by providing a Bearer token in the 'Authorization' header."
      operationId: addAgreementSnippit
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addAgreementSnippitRequest'
      responses:
        200:
          description: 'Agreement snippits saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addAgreementSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_snippit'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_snippit/{snippitId}':
    post:
      tags:
        - Snippits
      summary: 'Update agreement'
      description: "Update the agreement by providing a Bearer token in the 'Authorization' header."
      operationId: updateAgreementSnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addAgreementSnippitRequest'
      responses:
        200:
          description: 'Agreement snippits updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateAgreementSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  '/api/snippit/{snippitId}':
    delete:
      tags:
        - Snippits
      summary: 'Delete a Snippit by ID'
      description: 'Delete a agreement snippit by specifying the ID.'
      operationId: destroySnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement snippits deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroySnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  '/api/preview_snippit/{snippitId}':
    get:
      tags:
        - Snippits
      summary: 'Get agreement snippit details by snippitId'
      description: "Retrieve a agreement snippit by snippitId with providing a Bearer token in the 'Authorization' header."
      operationId: previewSnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement snippits preview successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previewSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/preview_snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  /api/agreement_state_snippits:
    post:
      tags:
        - Snippits
      summary: 'Get all State snippit'
      description: "Retrieve a filtered State snippit by providing a Bearer token in the 'Authorization' header."
      operationId: stateSnippitsListing
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'State snippit retrieved successfullyy'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stateSnippitsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/agreement_state_snippits'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_state_snippit:
    post:
      tags:
        - Snippits
      summary: 'Add Agreement'
      description: "Save the state snippit by providing a Bearer token in the 'Authorization' header."
      operationId: addStateSnippit
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addStateSnippitRequest'
      responses:
        200:
          description: 'Agreement state snippit saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addStateSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_state_snippit'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_state_snippit/{snippitId}':
    post:
      tags:
        - Snippits
      summary: 'Update agreement state snippit'
      description: "Update the agreement state snippit by providing a\n     * Bearer token in the 'Authorization' header."
      operationId: updateStateSnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement state snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addStateSnippitRequest'
      responses:
        200:
          description: 'Agreement state snippit updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateStateSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_state_snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  '/api/state_snippit/{snippitId}':
    delete:
      tags:
        - Snippits
      summary: 'Delete a  state snippit by ID'
      description: 'Delete a agreement state snippit by specifying the ID.'
      operationId: destroyStateSnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'State snippits deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroyStateSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/state_snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  '/api/preview_state_snippit/{snippitId}':
    get:
      tags:
        - Snippits
      summary: 'Get agreement state details by snippitId'
      description: "Retrieve a agreement state snippit by snippitId with providing a\n     * Bearer token in the 'Authorization' header."
      operationId: previewStateSnippit
      parameters:
        -
          name: snippitId
          in: path
          description: 'ID of the agreement snippit to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement snippit preview successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previewStateSnippittResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/preview_state_snippit/{snippitId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.snippitId: method.request.querystring.snippitId
        passthroughBehavior: when_no_match
        type: http
  /api/get_agreement_snippit:
    get:
      tags:
        - Snippits
      summary: 'Get Brands list'
      description: "Retrieve agreement snippit listing by providing a Bearer token in the 'Authorization' header."
      operationId: getSnippit
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement snippit listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_agreement_snippit'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/get_state_agreement_snippit:
    get:
      tags:
        - Snippits
      summary: 'Get state agreement snippit list'
      description: "Retrieve state agreement snippit listing by providing a Bearer token in the 'Authorization' header."
      operationId: getStateSnippit
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'State agreement snippit listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStateSnippitResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_state_agreement_snippit'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/attestation_sections:
    post:
      tags:
        - 'Attestation Section'
      summary: 'Get all Attestation Section'
      description: "Retrieve Attestation Section by providing a Bearer token in the 'Authorization' header."
      operationId: getAttestationSection
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Attestation Section listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAttestationSectionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/attestation_sections'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/attestation_section_add:
    post:
      tags:
        - 'Attestation Section'
      summary: 'Save Attestation Section'
      description: "Save the Attestation Section by providing a Bearer token in the 'Authorization' header."
      operationId: saveAttestationSection
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAttestationSectionRequest'
      responses:
        200:
          description: 'Attestation Section saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveAttestationSectionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/attestation_section_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/attestation_section_update/{attestationSectionId}':
    post:
      tags:
        - 'Attestation Section'
      summary: 'Update Attestation Section'
      description: "Update the Attestation Section by providing a Bearer token in the 'Authorization' header."
      operationId: attestationSectionUpdate
      parameters:
        -
          name: attestationSectionId
          in: path
          description: 'ID of the filter to update Attestation Section'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveAttestationSectionRequest'
      responses:
        200:
          description: 'Attestation Section updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attestationSectionUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/attestation_section_update/{attestationSectionId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.attestationSectionId: method.request.querystring.attestationSectionId
        passthroughBehavior: when_no_match
        type: http
  '/api/attestation_section/{attestationSectionId}':
    delete:
      tags:
        - 'Attestation Section'
      summary: 'Delete a Attestation Section by ID'
      description: 'Delete a AttestationSection by specifying the ID.'
      operationId: attestationSectionDestroy
      parameters:
        -
          name: attestationSectionId
          in: path
          description: 'ID of the filter to update Attestation Section'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Attestation Section deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attestationSectionDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/attestation_section/{attestationSectionId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.attestationSectionId: method.request.querystring.attestationSectionId
        passthroughBehavior: when_no_match
        type: http
  /api/get_attestation_section:
    get:
      tags:
        - 'Attestation Section'
      summary: 'Get all Attestation Section'
      description: "Retrieve Attestation Section by providing a Bearer token in the 'Authorization' header."
      operationId: getAllAttestationSection
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Attestation Section listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllAttestationSectionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_attestation_section'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/client_audits/{clientid}':
    get:
      tags:
        - Audits
      summary: 'Get Client Audits'
      description: "Retrieve client audit by providing a Bearer token in the 'Authorization' header."
      operationId: postclientAudits
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client audit listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postclientAuditsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_audits/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/login:
    post:
      tags:
        - Login
      summary: 'User login'
      description: 'Authenticate a user and generate a JWT token for authentication.'
      operationId: login
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/loginRequest'
      responses:
        200:
          description: 'Successful login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/login'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
        passthroughBehavior: when_no_match
        type: http
  /api/logout:
    post:
      tags:
        - Logout
      summary: 'Logout a user'
      description: 'Logout the currently authenticated user by invalidating their token.'
      operationId: logoutUser
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User logged out successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logoutUserResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/logout'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
        passthroughBehavior: when_no_match
        type: http
  /api/refresh:
    post:
      tags:
        - Login
      summary: 'Refresh access token'
      description: 'Refresh the access token by providing a valid refresh token in the request body.'
      operationId: refreshToken
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Token refreshed successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refreshTokenResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/refresh'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
        passthroughBehavior: when_no_match
        type: http
  /api/request_otp:
    post:
      tags:
        - Login
      summary: 'Request OTP'
      description: 'Request a one-time password (OTP) for authentication.'
      operationId: requestOtp
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/requestOtpRequest'
      responses:
        200:
          description: 'OTP request successful.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestOtpResponse200'
        404:
          description: 'Bad request'
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/request_otp'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
        passthroughBehavior: when_no_match
        type: http
  /api/verify_otp:
    post:
      tags:
        - Login
      summary: 'Verify OTP'
      description: 'Verify a one-time password (OTP) provided by the user.'
      operationId: verifyOtp
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/verifyOtpRequest'
      responses:
        200:
          description: 'OTP verification successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyOtpResponse200'
        404:
          description: 'Bad request'
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/verify_otp'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
        passthroughBehavior: when_no_match
        type: http
  /api/batch_prints:
    get:
      tags:
        - 'Batch Prints'
      summary: 'Get all batch print'
      description: "Retrieve batch print by providing a Bearer token in the 'Authorization' header."
      operationId: batchPrintListing
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Batch print listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchPrintListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/batch_prints'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/prints:
    get:
      tags:
        - 'Batch Prints'
      summary: 'Get all prints'
      description: "Retrieve prints by providing a Bearer token in the 'Authorization' header."
      operationId: printsListing
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Prints listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/printsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/prints'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/batch_print_add:
    post:
      tags:
        - 'Batch Prints'
      summary: 'Add batch print'
      description: "Save the batch print by providing a Bearer token in the 'Authorization' header."
      operationId: saveBatchPrint
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/saveBatchPrintRequest'
      responses:
        200:
          description: 'Batch print saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBatchPrintResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/batch_print_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/pending_batch_print:
    get:
      tags:
        - 'Batch Prints'
      summary: 'Get all Batch print'
      description: "Retrieve pending batch print by providing a Bearer token in the 'Authorization' header."
      operationId: getPendingBatchPrints
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Pending batch print listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPendingBatchPrintsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/pending_batch_print'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/status_update_batch_print/{batchId}':
    post:
      tags:
        - 'Batch Prints'
      summary: 'Update batch print'
      description: "Update the batch print by providing a Bearer token in the 'Authorization' header."
      operationId: statusUpdateBatchPrint
      parameters:
        -
          name: batchId
          in: path
          description: 'batch ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBatchPrintRequest'
      responses:
        200:
          description: 'Update batch print saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusUpdateBatchPrintResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/status_update_batch_print/{batchId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.batchId: method.request.querystring.batchId
        passthroughBehavior: when_no_match
        type: http
  /api/batch_print_setting:
    get:
      tags:
        - 'Batch Prints'
      summary: 'Get batch print setting'
      description: "Retrieve batch print setting by providing a Bearer token in the 'Authorization' header."
      operationId: getBatchPrintSetting
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Batch print setting detail listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBatchPrintSettingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/batch_print_setting'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/save_batch_print_setting:
    post:
      tags:
        - 'Batch Prints'
      summary: 'Update batch print settings'
      description: "Update batch print settings by providing a Bearer token in the 'Authorization' header."
      operationId: saveBatchPrintSetting
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBatchPrintSettingRequest'
      responses:
        200:
          description: 'Batch print settings saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBatchPrintSettingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/save_batch_print_setting'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/billing_categories_list:
    get:
      tags:
        - 'Billing Category'
      summary: 'Get all billing Category'
      description: "Retrieve billing Category by providing a Bearer token in the 'Authorization' header."
      operationId: billingCategories
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing Category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingCategoriesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_categories_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/billing_categories_add:
    post:
      tags:
        - 'Billing Category'
      summary: 'Add Billing Category'
      description: "Save the Billing Category by providing a Bearer token in the 'Authorization' header."
      operationId: saveBillingCategory
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBillingCategoryRequest'
      responses:
        200:
          description: 'Billing Category saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBillingCategoryResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_categories_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/billing_categories_update/{categoryId}':
    post:
      tags:
        - 'Billing Category'
      summary: 'Update Billing Category'
      description: "Update the Billing Category by providing a Bearer token in the 'Authorization' header."
      operationId: billingCategoryUpdate
      parameters:
        -
          name: categoryId
          in: path
          description: 'ID of the filter to update Billing Category'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBillingCategoryRequest'
      responses:
        200:
          description: 'Billing Category updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingCategoryUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_categories_update/{categoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.categoryId: method.request.querystring.categoryId
        passthroughBehavior: when_no_match
        type: http
  '/api/billing_categories/{categoryId}':
    delete:
      tags:
        - 'Billing Category'
      summary: 'Delete a Billing Category by ID'
      description: 'Delete a Billing Category by specifying the ID.'
      operationId: billingCategoryDestroy
      parameters:
        -
          name: categoryId
          in: path
          description: 'ID of the filter to update Billing Category'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing Category deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingCategoryDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_categories/{categoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.categoryId: method.request.querystring.categoryId
        passthroughBehavior: when_no_match
        type: http
  /api/billing_categories_listing:
    get:
      tags:
        - 'Billing Category'
      summary: 'Get all billing Category Listing'
      description: "Retrieve billing Category Listing by providing a Bearer token in the 'Authorization' header."
      operationId: billingCategoriesListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing Category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingCategoriesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_categories_listing'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/billing_status_list:
    get:
      tags:
        - 'Billing Status'
      summary: 'Get Billing Status'
      description: "Retrieve Billing Status listing by providing a Bearer token in the 'Authorization' header."
      operationId: getBillingStatus
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBillingStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  /api/billing_status_listing:
    get:
      tags:
        - 'Billing Status'
      summary: 'Get all BillingStatus for table'
      description: "Retrieve Billing Status by providing a Bearer token in the 'Authorization' header."
      operationId: getBillingStatusListing
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBillingStatusListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status_listing'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/billing_status_add:
    post:
      tags:
        - 'Billing Status'
      summary: 'Add Billing Status'
      description: "Save the Billing Status by providing a Bearer token in the 'Authorization' header."
      operationId: saveBillingStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBillingStatusRequest'
      responses:
        200:
          description: 'Billing status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBillingStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/billing_status_update/{billingStatusId}':
    post:
      tags:
        - 'Billing Status'
      summary: 'Update Billing Status'
      description: "Update the Billing Status by providing a Bearer token in the 'Authorization' header."
      operationId: billingStatusUpdate
      parameters:
        -
          name: billingStatusId
          in: path
          description: 'ID of the filter to update Billing Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/billingStatusUpdateRequest'
      responses:
        200:
          description: 'Billing status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status_update/{billingStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.billingStatusId: method.request.querystring.billingStatusId
        passthroughBehavior: when_no_match
        type: http
  '/api/billing_status_delete/{billingStatusId}':
    delete:
      tags:
        - 'Billing Status'
      summary: 'Delete a Billing Status by ID'
      description: 'Delete a Billing Status by specifying the ID.'
      operationId: billingStatusDestroy
      parameters:
        -
          name: billingStatusId
          in: path
          description: 'ID of the filter to update Billing Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/billingStatusDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status_delete/{billingStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.billingStatusId: method.request.querystring.billingStatusId
        passthroughBehavior: when_no_match
        type: http
  '/api/billing_status/{type}':
    get:
      tags:
        - 'Billing Status'
      summary: 'Get all Billing Status for contract'
      description: "Retrieve billing status by providing a bearer token in the 'Authorization' header."
      operationId: agreementBillingStatus
      parameters:
        -
          name: type
          in: path
          description: 'type Billing Status for contract'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agreementBillingStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/billing_status/{type}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.type: method.request.querystring.type
        passthroughBehavior: when_no_match
        type: http
  /api/brands:
    get:
      tags:
        - Brands
      summary: 'Get Brands list'
      description: "Retrieve Brands listing by providing a Bearer token in the 'Authorization' header."
      operationId: brandsListing
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Brands listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/brandsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/brands'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_brand:
    post:
      tags:
        - Brands
      summary: 'Add brand'
      description: "Save the brand by providing a Bearer token in the             'Authorization' header."
      operationId: saveBrand
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBrandRequest'
      responses:
        200:
          description: 'Brand saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBrandResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_brand'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_brand/{brandsId}':
    post:
      tags:
        - Brands
      summary: 'Update brand'
      description: "Update the brand by providing a Bearer token in the 'Authorization' header."
      operationId: brandUpdate
      parameters:
        -
          name: brandsId
          in: path
          description: 'ID of the filter to update brand id'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBrandRequest'
      responses:
        200:
          description: 'Brand updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/brandUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_brand/{brandsId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.brandsId: method.request.querystring.brandsId
        passthroughBehavior: when_no_match
        type: http
  '/api/update_brand_status/{brandsId}':
    post:
      tags:
        - Brands
      summary: 'Update Brand Status'
      description: "Update the Brand Status by providing a Bearer token in the 'Authorization' header."
      operationId: updateBrandStatus
      parameters:
        -
          name: brandsId
          in: path
          description: 'ID of the filter to update brand id'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateBrandStatusRequest'
      responses:
        200:
          description: 'Brand Status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateBrandStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_brand_status/{brandsId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.brandsId: method.request.querystring.brandsId
        passthroughBehavior: when_no_match
        type: http
  /api/bureau_address:
    get:
      tags:
        - 'Bureau Address'
      summary: 'Get all bureau address'
      description: "Retrieve bureau address by providing a Bearer token in the 'Authorization' header."
      operationId: bureauAddressListing
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Bureau address listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bureauAddressListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/bureau_address'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/bureau_address/{bureauId}':
    get:
      tags:
        - 'Bureau Address'
      summary: 'Get Bureau details by bureauId'
      description: "Retrieve a filter by bureauId with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: getBureauDetail
      parameters:
        -
          name: bureauId
          in: path
          description: 'ID of the bureau to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Bureau details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBureauDetailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/bureau_address/{bureauId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.bureauId: method.request.querystring.bureauId
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - 'Bureau Address'
      summary: 'Delete a bureau address by ID'
      description: 'Delete a bureau address by specifying the bureau ID.'
      operationId: bureauAddressDestroy
      parameters:
        -
          name: bureauId
          in: path
          description: 'ID of the filter to update Bureau Address'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Bureau Address deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bureauAddressDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/bureau_address/{bureauId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.bureauId: method.request.querystring.bureauId
        passthroughBehavior: when_no_match
        type: http
  /api/bureau_address_add:
    post:
      tags:
        - 'Bureau Address'
      summary: 'Save Bureau Address'
      description: "Save the Bureau Address by providing a Bearer token in the 'Authorization' header."
      operationId: saveBureauAddress
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBureauAddressRequest'
      responses:
        200:
          description: 'Bureau Address saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveBureauAddressResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/bureau_address_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/bureau_address_update/{bureauId}':
    post:
      tags:
        - 'Bureau Address'
      summary: 'Update Bureau Address'
      description: "Update the Bureau Address by providing a Bearer token in the 'Authorization' header."
      operationId: updatebureauAddress
      parameters:
        -
          name: bureauId
          in: path
          description: 'ID of the filter to update Bureau Address'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveBureauAddressRequest'
      responses:
        200:
          description: 'Bureau Address updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatebureauAddressResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/bureau_address_update/{bureauId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.bureauId: method.request.querystring.bureauId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_agreements/{clientId}':
    get:
      tags:
        - 'Client Agreement'
      summary: 'Get Client Agreement'
      description: "Retrieve client agreement listing by providing a Bearer token in the 'Authorization' header."
      operationId: clientAgreements
      parameters:
        -
          name: clientId
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: "per page ('1')"
          required: false
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Agreement listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientAgreementsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_agreements/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_agreement/{agreementId}':
    delete:
      tags:
        - 'Client Agreement'
      summary: 'Delete a client agreement by ID'
      description: 'Delete a client agreement by specifying the agreement ID.'
      operationId: deleteClientAgreement
      parameters:
        -
          name: agreementId
          in: path
          description: 'ID of the client agreement to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Billing status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteClientAgreementResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_agreement/{agreementId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.agreementId: method.request.querystring.agreementId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_document/{clientId}':
    get:
      tags:
        - 'Client Document'
      summary: 'Get Client Document'
      description: "Retrieve client document by providing a Bearer token in the 'Authorization' header."
      operationId: getClientDocuments
      parameters:
        -
          name: clientId
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: true
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Documents listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientDocumentsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_document/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_document/{documentId}':
    delete:
      tags:
        - 'Client Document'
      summary: 'Delete a client document by ID'
      description: 'Delete a client document by specifying the agreement ID.'
      operationId: deleteClientsDocument
      parameters:
        -
          name: documentId
          in: path
          description: 'document ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Documents deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteClientsDocumentResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_document/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  '/api/add_client_document/{clientId}':
    post:
      tags:
        - 'Client Document'
      summary: 'Add document as client documents'
      description: "Add client document by providing a Bearer token in the 'Authorization' header."
      operationId: addClientsDocument
      parameters:
        -
          name: clientId
          in: path
          description: 'client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addClientsDocumentRequest'
      responses:
        200:
          description: 'Client document added successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addClientsDocumentResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_client_document/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
        passthroughBehavior: when_no_match
        type: http
  /api/client_filter:
    post:
      tags:
        - Clients
      summary: 'Get a filtered client'
      description: "Retrieve a filtered client by providing a Bearer token in the 'Authorization' header."
      operationId: getFilteredClients
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Clients retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFilteredClientsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_filter'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/segment_people_count:
    post:
      tags:
        - 'Clients Segment'
      summary: 'Get a filtered client segment'
      description: "Retrieve a filtered Segment client count by providing\n     * a Bearer token in the 'Authorization' header."
      operationId: segmentPeopleCount
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Segment client count retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentPeopleCountResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_people_count'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_filter_listing/{uniqueAccid}/{filterType}':
    get:
      tags:
        - Clients
      summary: 'Get all saved clients of filters'
      description: "Retrieve a filtered client by providing a Bearer token in the 'Authorization' header."
      operationId: getFilteredClientsListing
      parameters:
        -
          name: uniqueAccid
          in: path
          description: 'Unique Account ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: filterType
          in: path
          description: "Filter type (e.g., 'myfilter')"
          required: true
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client save filter listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFilteredClientsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_filter_listing/{uniqueAccid}/{filterType}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueAccid: method.request.querystring.uniqueAccid
          integration.request.path.filterType: method.request.querystring.filterType
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  '/api/filter/{filterId}':
    get:
      tags:
        - Clients
      summary: 'Get filter details by filterId'
      description: "Retrieve a filtered client by providing a Bearer token in the 'Authorization' header."
      operationId: getClientFilterById
      parameters:
        -
          name: filterId
          in: path
          description: 'filter ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client save filter detail successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientFilterByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/filter/{filterId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.filterId: method.request.querystring.filterId
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Clients
      summary: 'Delete Client filters'
      description: " Delete the client Filter by providing a Bearer token in the 'Authorization'header."
      operationId: deleteClientFilter
      parameters:
        -
          name: filterId
          in: path
          description: 'filter ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client filter delete successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteClientFilterResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/filter/{filterId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.filterId: method.request.querystring.filterId
        passthroughBehavior: when_no_match
        type: http
  /api/filter:
    post:
      tags:
        - Clients
      summary: 'Save Client filters'
      description: " Save the client Filter by providing a Bearer token in the 'Authorization'header."
      operationId: saveClientFilter
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveClientFilterRequest'
      responses:
        200:
          description: 'Client save filter Added successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveClientFilterResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/filter'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/filter_update/{filterId}':
    post:
      tags:
        - Clients
      summary: 'Save Client filters'
      description: " Save the client Filter by providing a Bearer token in the 'Authorization'header."
      operationId: updateClientFilter
      parameters:
        -
          name: filterId
          in: path
          description: 'filter ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateClientFilterRequest'
      responses:
        200:
          description: 'Client update filter Added successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateClientFilterResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/filter_update/{filterId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.filterId: method.request.querystring.filterId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_constraint_trigger/{clientId}':
    get:
      tags:
        - 'Client Workflow'
      summary: 'Get client constrained trigger listing'
      description: "Retrieve client constrained trigger listing\n     * by providing a Bearer token in the 'Authorization' header."
      operationId: clientConstrainedTrigger
      parameters:
        -
          name: clientId
          in: path
          description: 'client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client constrained trigger listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientConstrainedTriggerResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_constraint_trigger/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_constraint_sequence/{uniqueAccid}':
    get:
      tags:
        - 'Client Workflow'
      summary: 'Get client constrained Sequence listing listing'
      description: "Retrieve client constrained Sequence listing listing\n     * by providing a Bearer token in the 'Authorization' header."
      operationId: clientConstrainedSequence
      parameters:
        -
          name: uniqueAccid
          in: path
          description: 'unique account ID (e.g., 5)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client constrained Sequence listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientConstrainedSequenceResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_constraint_sequence/{uniqueAccid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueAccid: method.request.querystring.uniqueAccid
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/clients:
    get:
      tags:
        - Clients
      summary: 'Get all clients'
      description: "Retrieve a clients by providing a Bearer token in the 'Authorization' header."
      operationId: getClients
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Clients retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/clients'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client/{clientid}':
    get:
      tags:
        - Clients
      summary: 'Get client details by ID'
      description: "Retrieve a client by providing a Bearer token in the 'Authorization' header."
      operationId: getClientById
      parameters:
        -
          name: clientid
          in: path
          description: 'client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
        passthroughBehavior: when_no_match
        type: http
  '/api/client_skip_auth/{clientid}':
    get:
      tags:
        - Clients
      summary: 'Run skip auth by ID'
      description: "Retrieve a client by providing a Bearer token in the 'Authorization' header."
      operationId: skipAuth
      parameters:
        -
          name: clientid
          in: path
          description: 'client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client skip auth successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skipAuthResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_skip_auth/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
        passthroughBehavior: when_no_match
        type: http
  '/api/client_import_account_report/{clientid}':
    post:
      tags:
        - Clients
      summary: 'import account report'
      description: "Save the import account report by providing a Bearer token in the 'Authorization' header."
      operationId: importAccountReport
      parameters:
        -
          name: clientid
          in: path
          description: 'ID of the filter to update client id'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/importAccountReportRequest'
      responses:
        200:
          description: 'Client import account report saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/importAccountReportResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_import_account_report/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
        passthroughBehavior: when_no_match
        type: http
  /api/collection_status:
    post:
      tags:
        - 'Collection Status'
      summary: 'Get all Collection Status'
      description: "Retrieve Collection Status by providing a Bearer token in the 'Authorization' header."
      operationId: getCollectionStatus
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Collection Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCollectionStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/collection_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/collection_status_add:
    post:
      tags:
        - 'Collection Status'
      summary: 'Save Collection status'
      description: "Save the Collection Status by providing a Bearer token in the 'Authorization' header."
      operationId: saveCollectionStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveCollectionStatusRequest'
      responses:
        200:
          description: 'Collection Status saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveCollectionStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/collection_status_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/collection_status_update/{collectionStatusId}':
    post:
      tags:
        - 'Collection Status'
      summary: 'Update Collection Status'
      description: "Update the Collection Status by providing a Bearer token in the 'Authorization' header."
      operationId: collectionStatusUpdate
      parameters:
        -
          name: collectionStatusId
          in: path
          description: 'ID of the filter to update Collection Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveCollectionStatusRequest'
      responses:
        200:
          description: 'Collection Status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/collection_status_update/{collectionStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.collectionStatusId: method.request.querystring.collectionStatusId
        passthroughBehavior: when_no_match
        type: http
  '/api/collection_status/{collectionStatusId}':
    delete:
      tags:
        - 'Collection Status'
      summary: 'Delete a Collection Status by ID'
      description: 'Delete a Collection Status by specifying the ID.'
      operationId: collectionStatusDestroy
      parameters:
        -
          name: collectionStatusId
          in: path
          description: 'ID of the filter to delete Collection Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Collection Status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionStatusDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/collection_status/{collectionStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.collectionStatusId: method.request.querystring.collectionStatusId
        passthroughBehavior: when_no_match
        type: http
  /api/get_collection_status:
    get:
      tags:
        - 'Collection Status'
      summary: 'Get all Collection Status'
      description: "Retrieve Collection Status by providing a Bearer token in the 'Authorization' header."
      operationId: getAllCollectionStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Collection Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllCollectionStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_collection_status/'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/reassign_agreement:
    get:
      tags:
        - 'Company Agreement'
      summary: 'Get Reassign Agreement Listing'
      description: "Retrieve Reassign Agreements by providing a Bearer token in the 'Authorization' header."
      operationId: reassignAgreementListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Reassign Agreement listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reassignAgreementListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/reassign_agreement/'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/get_agreement_list/{type}':
    post:
      tags:
        - 'Company Agreement'
      summary: 'Get Agreement Listing'
      description: "Retrieve Agreement listing by providing a Bearer token in the 'Authorization' header."
      operationId: getAgreementList
      parameters:
        -
          name: type
          in: path
          description: 'type (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Agreement listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAgreementListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_agreement_list/{type}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.type: method.request.querystring.type
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_agreement:
    post:
      tags:
        - 'Company Agreement'
      summary: 'Add Agreement'
      description: "Save the agreement by providing a Bearer token in the 'Authorization' header."
      operationId: addNewAgreement
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addNewAgreementRequest'
      responses:
        200:
          description: 'Agreement saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addNewAgreementResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_agreement'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_agreement/{agreementId}':
    post:
      tags:
        - 'Company Agreement'
      summary: 'Update agreement'
      description: "Update the agreement by providing a Bearer token in the 'Authorization' header."
      operationId: agreementUpdate
      parameters:
        -
          name: agreementId
          in: path
          description: 'ID of the agreement to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addNewAgreementRequest'
      responses:
        200:
          description: 'Agreement updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agreementUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_agreement/{agreementId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.agreementId: method.request.querystring.agreementId
        passthroughBehavior: when_no_match
        type: http
  '/api/preview_agreement/{agreementId}':
    get:
      tags:
        - 'Company Agreement'
      summary: 'Get agreement details by agreementId'
      description: "Retrieve a agreement by agreementId with providing\n     * a Bearer token in the 'Authorization' header."
      operationId: previewAgreement
      parameters:
        -
          name: agreementId
          in: path
          description: 'ID of the agreement to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previewAgreementeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/preview_agreement/{agreementId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.agreementId: method.request.querystring.agreementId
        passthroughBehavior: when_no_match
        type: http
  '/api/agreement/{agreementId}':
    delete:
      tags:
        - 'Company Agreement'
      summary: 'Delete a agreement by ID'
      description: 'Delete a agreement by specifying the ID.'
      operationId: destroyAgreement
      parameters:
        -
          name: agreementId
          in: path
          description: 'ID of the agreement to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Agreement deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroyAgreementResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/agreement/{agreementId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.agreementId: method.request.querystring.agreementId
        passthroughBehavior: when_no_match
        type: http
  /api/client_status_list:
    get:
      tags:
        - 'Company Client Status'
      summary: 'Get company client status listing'
      description: "Retrieve company client status listing by providing a\n     *  Bearer token in the 'Authorization' header."
      operationId: getCompanyClientStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Company client status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCompanyClientStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/client_status:
    get:
      tags:
        - 'Company Client Status'
      summary: 'Get all Client status'
      description: "Retrieve bureau address by providing a Bearer token in the 'Authorization' header."
      operationId: contactStatusListing
      parameters:
        -
          name: search
          in: query
          description: 'search  (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Contact status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactStatusListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_status/{statusId}':
    get:
      tags:
        - 'Company Client Status'
      summary: 'Get Client Status details by statusId'
      description: "Retrieve a filter by statusId with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: getClientStatusDetail
      parameters:
        -
          name: statusId
          in: path
          description: 'ID of the Client status to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Status details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientStatusDetailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status/{statusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.statusId: method.request.querystring.statusId
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - 'Company Client Status'
      summary: 'Delete a Client Status by ID'
      description: 'Delete a Client Status by specifying the status ID.'
      operationId: clientStatusDestroy
      parameters:
        -
          name: statusId
          in: path
          description: 'ID of the filter to update Client status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientStatusDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status/{statusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.statusId: method.request.querystring.statusId
        passthroughBehavior: when_no_match
        type: http
  /api/client_status_add:
    post:
      tags:
        - 'Company Client Status'
      summary: 'Save Client Status'
      description: "Save the Client Status by providing a Bearer token in the 'Authorization' header."
      operationId: saveClientStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveClientStatusRequest'
      responses:
        200:
          description: 'Client Status saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveClientStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/client_status_update/{statusId}':
    post:
      tags:
        - 'Company Client Status'
      summary: 'Update Client Status'
      description: "Update the Bureau Address by providing a Bearer token in the 'Authorization' header."
      operationId: contactStatusUpdate
      parameters:
        -
          name: statusId
          in: path
          description: 'ID of the filter to update Client status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/contactStatusUpdateRequest'
      responses:
        200:
          description: 'Client Status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contactStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_status_update/{statusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.statusId: method.request.querystring.statusId
        passthroughBehavior: when_no_match
        type: http
  /api/company_milestones:
    get:
      tags:
        - 'Company Milestone'
      summary: 'Get company milestone listing'
      description: "Retrieve company milestone listing by providing a Bearer token in the 'Authorization' header."
      operationId: getCompanyMilestones
      parameters:
        -
          name: company_id
          in: query
          description: 'Company ID (e.g., 17)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search  (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Company Milestone listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCompanyMilestonesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/company_milestones'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.company_id: method.request.querystring.company_id
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  '/api/company_triggers/{type}':
    get:
      tags:
        - 'Company Trigger'
      summary: 'Get all triggers'
      description: "Retrieve triggers by providing a Bearer token in the 'Authorization' header."
      operationId: companyTriggersById
      parameters:
        -
          name: type
          in: path
          description: 'type (e.g., 0,1,2)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'Search text'
          required: true
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Trigger listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/companyTriggersByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/company_triggers/{type}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.type: method.request.querystring.type
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/company_trigger/{triggerId}':
    get:
      tags:
        - 'Company Trigger'
      summary: 'Get trigger details by filterId'
      description: "Retrieve a filter by triggerid with providing a Bearer token in the 'Authorization' header."
      operationId: getCompanyTriggerDetail
      parameters:
        -
          name: triggerId
          in: path
          description: 'ID of the sequence to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Trigger details listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCompanyTriggerDetaildResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/company_trigger/{triggerId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.triggerId: method.request.querystring.triggerId
        passthroughBehavior: when_no_match
        type: http
  /api/company_trigger_add:
    post:
      tags:
        - 'Company Trigger'
      summary: 'Save Company trigger'
      description: "Save the Company trigger by providing a Bearer token\n     * in the 'Authorization' header."
      operationId: addCompanyTrigger
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addCompanyTriggerRequest'
      responses:
        200:
          description: 'Company trigger saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addCompanyTriggerResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/company_trigger_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/company_trigger_update/{sequenceId}':
    post:
      tags:
        - 'Company Trigger'
      summary: 'Update Company Trigger filters'
      description: "Update the client Filter by providing a Bearer token in the 'Authorization' header."
      operationId: updateCompanyTrigger
      parameters:
        -
          name: sequenceId
          in: path
          description: 'ID of the Company Trigger to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateCompanyTriggerRequest'
      responses:
        200:
          description: 'Company trigger updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateCompanyTriggerResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/company_trigger_update/{sequenceId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.sequenceId: method.request.querystring.sequenceId
        passthroughBehavior: when_no_match
        type: http
  '/api/workflow_status_update/{sequenceId}':
    get:
      tags:
        - 'Company Trigger'
      summary: 'Update workflow status by sequenceId or sequenceId'
      description: "Update workflow status by triggerId or sequenceId\n     * with providing a Bearer token in the 'Authorization' header."
      operationId: updateWorkflowStatus
      parameters:
        -
          name: sequenceId
          in: path
          description: 'ID of the Company Trigger to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Update workflow status successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateWorkflowStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_status_update/{sequenceId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.sequenceId: method.request.querystring.sequenceId
        passthroughBehavior: when_no_match
        type: http
  /api/cront_list:
    get:
      tags:
        - 'Csv Cron'
      summary: 'Get all csv cron listing'
      description: "Retrieve csv cron listing by providing a Bearer token in the 'Authorization' header."
      operationId: csvCronListing
      parameters:
        -
          name: search
          in: query
          description: 'Search text'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Csv cron listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/csvCronListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/cront_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/upload_csv_tools:
    post:
      tags:
        - 'Csv Cron'
      summary: 'Upload csv tools'
      description: "Upload csv tools by providing a Bearer token in the 'Authorization' header."
      operationId: csvToolsUpload
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/csvToolsUploadRequest'
      responses:
        200:
          description: 'Upload csv tools successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/csvToolsUploadResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/upload_csv_tools'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/emails/{clientid}':
    get:
      tags:
        - 'Client Email'
      summary: 'Get Client Emails'
      description: "Retrieve client emails listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClientEmails
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Emails listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientEmailsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/emails/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/send_email/{clientId}':
    post:
      tags:
        - 'Client Email'
      summary: 'Client email send'
      description: "Save the Client email send by providing a Bearer token in the 'Authorization' header."
      operationId: sendEmail
      parameters:
        -
          name: clientId
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/sendEmailRequest'
      responses:
        200:
          description: 'Client email send successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendEmailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/send_email/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
        passthroughBehavior: when_no_match
        type: http
  /api/fax_log:
    post:
      tags:
        - 'Fax Log'
      summary: 'Get all FaxLog'
      description: "Retrieve Fax Log by providing a Bearer token in the 'Authorization' header."
      operationId: getFaxLog
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Fax Log listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFaxLogResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_log'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/fax_log_delete/{faxLogId}':
    delete:
      tags:
        - 'Fax Log'
      summary: 'Delete a Fax Log by ID'
      description: 'Delete a Fax Log by specifying the ID.'
      operationId: faxLogDestroy
      parameters:
        -
          name: faxLogId
          in: path
          description: 'ID of the fax Log to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Fax Log deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faxLogDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_log_delete/{faxLogId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.faxLogId: method.request.querystring.faxLogId
        passthroughBehavior: when_no_match
        type: http
  /api/fax_furnisher_search:
    get:
      tags:
        - 'Fax Log'
      summary: 'Search all furnisher in fax'
      description: "Retrieve Fax furnisher by providing a Bearer token in the 'Authorization' header."
      operationId: faxFurnisherSearch
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: id
          in: query
          description: 'id field (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Fax Furnishers listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faxFurnisherSearchResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_furnisher_search'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.id: method.request.querystring.id
        passthroughBehavior: when_no_match
        type: http
  /api/fax_bureau_search:
    get:
      tags:
        - 'Fax Log'
      summary: 'Search all bureau in fax'
      description: "Retrieve Fax bureau by providing a Bearer token in the 'Authorization' header."
      operationId: faxBureauSearch
      parameters:
        -
          name: search
          in: query
          description: 'search field (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Fax bureau listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faxBureauSearchResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_bureau_search'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
        passthroughBehavior: when_no_match
        type: http
  '/api/get_bureau/{bureauId}':
    get:
      tags:
        - 'Fax Log'
      summary: 'Get bureau in fax'
      description: "Retrieve Fax bureau by providing a Bearer token in the 'Authorization' header."
      operationId: getBureau
      parameters:
        -
          name: bureauId
          in: path
          description: 'bureau Id  (e.g., 2)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Bureau details successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBureauResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_bureau/{bureauId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.bureauId: method.request.querystring.bureauId
        passthroughBehavior: when_no_match
        type: http
  '/api/get_furnisher/{furnisherId}':
    get:
      tags:
        - 'Fax Log'
      summary: 'Get furnisher in fax'
      description: "Retrieve Fax furnisher by providing a Bearer token in the 'Authorization' header."
      operationId: getFurnisher
      parameters:
        -
          name: furnisherId
          in: path
          description: 'furnisher Id  (e.g., 2)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Furnisher details successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFurnisherResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_furnisher/{furnisherId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.furnisherId: method.request.querystring.furnisherId
        passthroughBehavior: when_no_match
        type: http
  '/api/fax_setting/{settingId}':
    get:
      tags:
        - 'Fax Log'
      summary: 'Get FaxSetting'
      description: "Retrieve Fax Setting by providing a Bearer token in the 'Authorization' header."
      operationId: getFaxSetting
      parameters:
        -
          name: settingId
          in: path
          description: 'setting Id  (e.g., 2)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Fax Setting Retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFaxSettingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_setting/{settingId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.settingId: method.request.querystring.settingId
        passthroughBehavior: when_no_match
        type: http
  '/api/fax_setting_update/{settingId}':
    post:
      tags:
        - 'Fax Log'
      summary: 'Update Fax Setting'
      description: "Update the Fax Setting by providing a Bearer token in the 'Authorization' header."
      operationId: faxSettingUpdateById
      parameters:
        -
          name: settingId
          in: path
          description: 'ID of the fax setting to update Fax setting'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/faxSettingUpdateByIdRequest'
      responses:
        200:
          description: 'Fax setting updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/faxSettingUpdateByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/fax_setting_update/{settingId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.settingId: method.request.querystring.settingId
        passthroughBehavior: when_no_match
        type: http
  /api/claim_code:
    get:
      tags:
        - Instruction
      summary: 'Get claim code'
      description: "Retrieve Claim code listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClaimCode
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Claim code listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClaimCodeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/claim_code'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/instructions:
    post:
      tags:
        - Instruction
      summary: 'Get a instruction listing'
      description: "Retrieve a filtered instruction by providing a Bearer token in the 'Authorization' header."
      operationId: instructionListing
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Instruction retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/instructions'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/instruction_add:
    post:
      tags:
        - Instruction
      summary: 'Save Instruction'
      description: "Save the Instruction by providing a Bearer token in the 'Authorization' header."
      operationId: saveInstruction
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveInstructionRequest'
      responses:
        200:
          description: 'Instruction saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveInstructionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/instruction_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/instruction_update/{instructionId}':
    post:
      tags:
        - Instruction
      summary: 'Update instruction'
      description: "Update the instruction by providing a Bearer token in the 'Authorization' header."
      operationId: instructionUpdate
      parameters:
        -
          name: instructionId
          in: path
          description: 'ID of the filter to update Instruction'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveInstructionRequest'
      responses:
        200:
          description: 'Instruction updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/instruction_update/{instructionId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.instructionId: method.request.querystring.instructionId
        passthroughBehavior: when_no_match
        type: http
  '/api/instruction/{instructionId}':
    delete:
      tags:
        - Instruction
      summary: 'Delete a Instruction by ID'
      description: 'Delete a Instruction by specifying the ID.'
      operationId: instructionDestroy
      parameters:
        -
          name: instructionId
          in: path
          description: 'ID of the filter to update Instruction'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Instruction deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/instruction/{instructionId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.instructionId: method.request.querystring.instructionId
        passthroughBehavior: when_no_match
        type: http
  /api/instruction_order_update:
    post:
      tags:
        - Instruction
      summary: 'Update order of instruction'
      description: "Update the instruction by providing a Bearer token in the 'Authorization' header."
      operationId: instructionOrderUpdate
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/instructionOrderUpdateRequest'
      responses:
        200:
          description: 'Instruction order updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionOrderUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/instruction_order_update'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/get_instructions:
    get:
      tags:
        - Instruction
      summary: 'Get Instruction'
      description: "Retrieve Instruction listing by providing a Bearer token in the 'Authorization' header."
      operationId: getAllInstruction
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Instruction listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllInstructionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_instructions'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/items/{clientid}':
    post:
      tags:
        - 'Client Items'
      summary: 'Get Client Items'
      description: "Retrieve client items listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClientItems
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Items listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientItemsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/items/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/item/{clientid}/{itemid}':
    get:
      tags:
        - 'Client Items'
      summary: 'Get Item detail by ID'
      description: "Retrieve a item detail by providing a Bearer token in the 'Authorization' header."
      operationId: getItemById
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: itemid
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item detail response successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getItemByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item/{clientid}/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.path.itemid: method.request.querystring.itemid
        passthroughBehavior: when_no_match
        type: http
  '/api/item_notes_listing/{itemid}':
    get:
      tags:
        - 'Client Items'
      summary: 'Get Item Notes Listing'
      description: "Retrieve item notes listing by providing a Bearer token in the 'Authorization' header."
      operationId: getItemNotes
      parameters:
        -
          name: itemid
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item Notes listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getItemNotesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item_notes_listing/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.itemid: method.request.querystring.itemid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/item_sequence_tags/{uniqueAccid}/{itemid}':
    get:
      tags:
        - 'Client Items'
      summary: 'Get Item Sequence Tag Listing'
      description: "Retrieve item sequence tag listing by providing a Bearer token in the 'Authorization' header."
      operationId: getItemSequenceTags
      parameters:
        -
          name: uniqueAccid
          in: path
          description: 'Unique Account ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: itemid
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item Sequence Tag listing successfull'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getItemSequenceTagsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item_sequence_tags/{uniqueAccid}/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueAccid: method.request.querystring.uniqueAccid
          integration.request.path.itemid: method.request.querystring.itemid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/item_active_sequence/{uniqueAccid}/{itemid}':
    get:
      tags:
        - 'Client Items'
      summary: 'Get Item Active Sequence Listing'
      description: "Retrieve item active sequence listing by providing a Bearer token in the 'Authorization' header."
      operationId: getItemActiveSequence
      parameters:
        -
          name: uniqueAccid
          in: path
          description: 'Unique Account ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: itemid
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item Active Sequence listing successfull'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getItemActiveSequenceResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item_active_sequence/{uniqueAccid}/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueAccid: method.request.querystring.uniqueAccid
          integration.request.path.itemid: method.request.querystring.itemid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/item_detail/{itemid}':
    get:
      tags:
        - 'Client Items'
      summary: 'Get Item detail by ID'
      description: "Retrieve a item detail by providing a Bearer token in the 'Authorization' header."
      operationId: itemDetail
      parameters:
        -
          name: itemid
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item detail response successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemDetailsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/item_detail/{itemid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.itemid: method.request.querystring.itemid
        passthroughBehavior: when_no_match
        type: http
  '/api/edit_item_status/{clientId}/{itemId}':
    post:
      tags:
        - 'Client Items'
      summary: 'Update item status'
      description: "Update an item status by providing a Bearer token in the 'Authorization' header."
      operationId: updateItemStatus
      parameters:
        -
          name: clientId
          in: path
          description: 'client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: itemId
          in: path
          description: 'item ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateItemStatusRequest'
      responses:
        200:
          description: 'Item status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateItemStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/edit_item_status/{clientId}/{itemId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
          integration.request.path.itemId: method.request.querystring.itemId
        passthroughBehavior: when_no_match
        type: http
  '/api/add_item/{clientId}':
    post:
      tags:
        - 'Client Items'
      summary: 'Add item'
      description: "Save the item by providing a Bearer token in the 'Authorization' header."
      operationId: addItem
      parameters:
        -
          name: clientId
          in: path
          description: 'client ID of the filter to add item'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addItemRequest'
      responses:
        200:
          description: 'Item saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addItemResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_item/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
        passthroughBehavior: when_no_match
        type: http
  '/api/delete_item/{itemId}':
    delete:
      tags:
        - 'Client Items'
      summary: 'Delete a item by ID'
      description: 'Delete a item by specifying the tag ID.'
      operationId: deleteItem
      parameters:
        -
          name: itemId
          in: path
          description: 'item ID of the filter to delete item'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Item deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addItemResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/delete_item/{itemId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.itemId: method.request.querystring.itemId
        passthroughBehavior: when_no_match
        type: http
  '/api/update_item/{itemId}':
    post:
      tags:
        - 'Client Items'
      summary: 'Update item'
      description: "Update the item by providing a Bearer token in the 'Authorization' header."
      operationId: updateItem
      parameters:
        -
          name: itemId
          in: path
          description: 'item ID of the filter to update item'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addItemRequest'
      responses:
        200:
          description: 'Item updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateItemResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_item/{itemId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.itemId: method.request.querystring.itemId
        passthroughBehavior: when_no_match
        type: http
  '/api/letters/{clientid}':
    get:
      tags:
        - 'Client Letters'
      summary: 'Get Client Letters Listing'
      description: "Retrieve client letters listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClientLetters
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Letters listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientLettersResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/letters/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/monitoring_site_listing:
    get:
      tags:
        - 'Monitoring Site'
      summary: 'Get Monitoring Site'
      description: "Monitoring site filter listing by providing a Bearer token in the 'Authorization' header."
      operationId: monitoringSiteListing
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Monitoring site filter listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitoringSiteListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/monitoring_site_listing'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  /api/review_report_source:
    get:
      tags:
        - 'Monitoring Site'
      summary: 'Get Review Report Site'
      description: "Retrieve monitoring site listing by providing a Bearer token in\n     * the 'Authorization' header."
      operationId: getReportSource
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Monitoring site listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReportSourceResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/review_report_source'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_report_source:
    post:
      tags:
        - 'Monitoring Site'
      summary: 'Save Reporting Resources'
      description: "Save the Reporting Resources by providing a Bearer token in the\n     *    'Authorization' header."
      operationId: addReportingResources
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addReportingResourcesRequest'
      responses:
        200:
          description: 'Reporting resources saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addReportingResourcesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_report_source'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/edit_report_source/{id}':
    post:
      tags:
        - 'Monitoring Site'
      summary: 'Update Reporting Resources'
      description: "Update the Reporting Resources by providing a Bearer token in the 'Authorization' header."
      operationId: updateReportingResources
      parameters:
        -
          name: id
          in: path
          description: 'ID of the reporting resources to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateReportingResourcesRequest'
      responses:
        200:
          description: 'Reporting resources updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateReportingResourcesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/edit_report_source/{id}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.id: method.request.querystring.id
        passthroughBehavior: when_no_match
        type: http
  '/api/delete_report_source/{id}':
    delete:
      tags:
        - 'Monitoring Site'
      summary: 'Delete Reporting Resources'
      description: "Delete the Reporting Resources by providing a Bearer token in the 'Authorization' header."
      operationId: deleteReportingResources
      parameters:
        -
          name: id
          in: path
          description: 'ID of the reporting resources to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Reporting resources deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteReportingResourcesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/delete_report_source/{id}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.id: method.request.querystring.id
        passthroughBehavior: when_no_match
        type: http
  /api/note_categories:
    get:
      tags:
        - 'Note Category'
      summary: 'Get all note Category'
      description: "Retrieve Note Category by providing a Bearer token in the 'Authorization' header."
      operationId: noteCategoriesListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Note Category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noteCategoriesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/note_categories'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/note_templates/{categoryId}':
    get:
      tags:
        - 'Note Category'
      summary: 'Get all note templates'
      description: "Retrieve Note templates by providing a Bearer token in the 'Authorization' header."
      operationId: noteTemplatesListing
      parameters:
        -
          name: categoryId
          in: path
          description: 'category ID of the filter to get note templates'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Note templates listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noteTemplatesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/note_templates/{categoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.categoryId: method.request.header.categoryId
        passthroughBehavior: when_no_match
        type: http
  /api/public_record_status:
    post:
      tags:
        - 'Public Record Status'
      summary: 'Get all Public Record Status'
      description: "Retrieve Public Record Status by providing a Bearer token in the 'Authorization' header."
      operationId: getPublicRecordStatus
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Public Record Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPublicRecordStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/public_record_status_add:
    post:
      tags:
        - 'Public Record Status'
      summary: 'Save Public Record Status'
      description: "Save the Public Record Status by providing a Bearer token in the\n     * 'Authorization' header."
      operationId: savePublicRecordStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/savePublicRecordStatusRequest'
      responses:
        200:
          description: 'Public Record Status saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/savePublicRecordStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_status_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/public_record_status_update/{publicRecordStatusId}':
    post:
      tags:
        - 'Public Record Status'
      summary: 'Update Public Record Status'
      description: "Update the Public Record Status by providing a Bearer token in the 'Authorization' header."
      operationId: publicRecordStatusUpdate
      parameters:
        -
          name: publicRecordStatusId
          in: path
          description: 'ID of the filter to update Public Record Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/savePublicRecordStatusRequest'
      responses:
        200:
          description: 'Public Record Status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicRecordStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_status_update/{publicRecordStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.publicRecordStatusId: method.request.querystring.publicRecordStatusId
        passthroughBehavior: when_no_match
        type: http
  '/api/public_record_status/{publicRecordStatusId}':
    delete:
      tags:
        - 'Public Record Status'
      summary: 'Delete a Public Record Status by ID'
      description: 'Delete a Public Record Status by specifying the ID.'
      operationId: publicRecordStatusDestroy
      parameters:
        -
          name: publicRecordStatusId
          in: path
          description: 'ID of the Public Record Status to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Public Record Status deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicRecordStatusDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_status/{publicRecordStatusId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.publicRecordStatusId: method.request.querystring.publicRecordStatusId
        passthroughBehavior: when_no_match
        type: http
  /api/get_public_record_status:
    get:
      tags:
        - 'Public Record Status'
      summary: 'Get all Public Record Status'
      description: "Retrieve Public Record Status by providing a Bearer token in the 'Authorization' header."
      operationId: getAllPublicRecordStatus
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Public Record Status listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllPublicRecordStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_public_record_status'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/public_record_type:
    post:
      tags:
        - 'Public Record Types'
      summary: 'Get all Public Record Type'
      description: "Retrieve Public Record Type by providing a Bearer token in the 'Authorization' header."
      operationId: getPublicRecordType
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Public Record Type listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPublicRecordTypeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_type'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/public_record_type_add:
    post:
      tags:
        - 'Public Record Types'
      summary: 'Save Public Record Type'
      description: "Save the Public Record Type by providing a Bearer token in the 'Authorization' header."
      operationId: savePublicRecordType
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/savePublicRecordTypeRequest'
      responses:
        200:
          description: 'Public Record Type saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/savePublicRecordTypeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_type_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/public_record_type_update/{publicRecordTypeId}':
    post:
      tags:
        - 'Public Record Types'
      summary: 'Update Public Record Type'
      description: "Update the Public Record Type by providing a Bearer token in the 'Authorization' header."
      operationId: publicRecordTypeUpdate
      parameters:
        -
          name: publicRecordTypeId
          in: path
          description: 'ID of the filter to update Public Record type'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/savePublicRecordTypeRequest'
      responses:
        200:
          description: 'Public Record Type updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicRecordTypeUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_type_update/{publicRecordTypeId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.publicRecordTypeId: method.request.querystring.publicRecordTypeId
        passthroughBehavior: when_no_match
        type: http
  '/api/public_record_type/{publicRecordTypeId}':
    delete:
      tags:
        - 'Public Record Types'
      summary: 'Delete a Public Record Type by ID'
      description: 'Delete a Public Record Type by specifying the ID.'
      operationId: publicRecordTypesDestroy
      parameters:
        -
          name: publicRecordTypeId
          in: path
          description: 'ID of the Public Record type to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Public Record Type deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicRecordTypesDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/public_record_type/{publicRecordTypeId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.publicRecordTypeId: method.request.querystring.publicRecordTypeId
        passthroughBehavior: when_no_match
        type: http
  /api/get_public_record_types:
    get:
      tags:
        - 'Public Record Types'
      summary: 'Get all Public Record Types'
      description: "Retrieve Public Record Types by providing a Bearer token in the 'Authorization' header."
      operationId: getAllPublicRecordTypes
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Public Record types listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllPublicRecordTypesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_public_record_types'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/client_review/{clientid}':
    get:
      tags:
        - 'Client Review'
      summary: 'Get Client Review'
      description: "Retrieve client review listing by providing a Bearer token in the 'Authorization' header."
      operationId: review
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Review listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_review/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/page_menus:
    get:
      tags:
        - 'Roles Permission'
      summary: 'Get all page menus'
      description: "Retrieve page menus by providing a Bearer token in the 'Authorization' header."
      operationId: menuPagesListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Page menus listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/menuPagesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/page_menus'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/role_with_permission/{roleId}':
    get:
      tags:
        - 'Roles Permission'
      summary: 'Get all page permission'
      description: "Retrieve get page role permission providing a Bearer token in the 'Authorization' header."
      operationId: getPageRolePermission
      parameters:
        -
          name: roleId
          in: path
          description: 'role id of the filter to role permission'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Page permission listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPageRolePermissionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/role_with_permission/{roleId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.roleId: method.request.querystring.roleId
        passthroughBehavior: when_no_match
        type: http
  /api/roles:
    get:
      tags:
        - 'Roles Permission'
      summary: 'Get roles listing'
      description: "Retrieve roles listing by providing a Bearer token in the 'Authorization' header."
      operationId: rolesManagement
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Roles listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesManagementResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/roles'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/roles_list:
    get:
      tags:
        - 'Roles Permission'
      summary: 'Get all Role Listing'
      description: "Retrieve roles by providing a Bearer token in the 'Authorization' header."
      operationId: rolesListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Roles listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/roles_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/add_role_permission:
    post:
      tags:
        - 'Roles Permission'
      summary: 'Add new role permission'
      description: "Save the role permission by providing a Bearer token in the 'Authorization' header."
      operationId: addRolePermission
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addRolePermissionRequest'
      responses:
        200:
          description: 'Role permission saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addRolePermissionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_role_permission'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_role_permission/{roleId}':
    post:
      tags:
        - 'Roles Permission'
      summary: 'Update role and permission'
      description: "Update the role permission by providing a Bearer token in the 'Authorization' header."
      operationId: updateRolePermission
      parameters:
        -
          name: roleId
          in: path
          description: 'ID of the filter to update role permission'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addRolePermissionRequest'
      responses:
        200:
          description: 'Role permission updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateRolePermissionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_role_permission/{roleId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.roleId: method.request.querystring.roleId
        passthroughBehavior: when_no_match
        type: http
  '/api/role_permission/{roleId}':
    delete:
      tags:
        - 'Roles Permission'
      summary: 'Delete a role permission by ID'
      description: 'Delete a role permission by specifying the ID.'
      operationId: deleteRolePermission
      parameters:
        -
          name: roleId
          in: path
          description: 'ID of the role permission to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Role permission deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteRolePermissionResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/role_permission/{roleId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.roleId: method.request.querystring.roleId
        passthroughBehavior: when_no_match
        type: http
  /api/segment_categories:
    get:
      tags:
        - 'Segment Category'
      summary: 'Get all segments category'
      description: "Retrieve segments category by providing a Bearer token in the 'Authorization' header."
      operationId: getSegmentCategoryListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segments Category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSegmentCategoryListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_categories'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/segment_categories_add:
    post:
      tags:
        - 'Segment Category'
      summary: 'Save Segment category'
      description: "Save the Segment category Filter by providing a\n     * Bearer token in the 'Authorization' header."
      operationId: segmentCategorySave
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/segmentCategorySaveRequest'
      responses:
        200:
          description: 'Segment category saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentCategorySaveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_categories_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/segments/{status}':
    get:
      tags:
        - Segments
      summary: 'Get all segments'
      description: "Retrieve segments by providing a Bearer token in the 'Authorization' header."
      operationId: segments
      parameters:
        -
          name: status
          in: path
          description: 'status of the segment to retrieve'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'Search text'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: perpage
          in: query
          description: 'per page (10)'
          required: false
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segments listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segments/{status}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.status: method.request.querystring.status
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/segment/{segmentId}':
    get:
      tags:
        - Segments
      summary: 'Get segments details by filterId'
      description: "Retrieve a filter by segmentId with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: getSegmentDetail
      parameters:
        -
          name: segmentId
          in: path
          description: 'ID of the segment to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segment details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSegmentDetailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment/{segmentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.segmentId: method.request.querystring.segmentId
        passthroughBehavior: when_no_match
        type: http
  '/api/segment_update/{segmentId}':
    post:
      tags:
        - Segments
      summary: 'Update segment filters'
      description: "Update the Segment Filter by providing a Bearer token in the 'Authorization' header."
      operationId: segmentUpdate
      parameters:
        -
          name: segmentId
          in: path
          description: 'ID of the segment to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/segmentUpdateRequest'
      responses:
        200:
          description: 'Workflow segment updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_update/{segmentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.segmentId: method.request.querystring.segmentId
        passthroughBehavior: when_no_match
        type: http
  /api/segment_add:
    post:
      tags:
        - Segments
      summary: 'Save Segment'
      description: "Save the Segment Filter by providing a Bearer token in the 'Authorization' header."
      operationId: segmentSave
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/segmentUpdateRequest'
      responses:
        200:
          description: 'Workflow segment saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentSaveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/segment_on_workflow/{segmentId}':
    get:
      tags:
        - Segments
      summary: 'Get segment workflow details by filterId'
      description: "Retrieve a filter by segmentId with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: segmentOnWorkflow
      parameters:
        -
          name: segmentId
          in: path
          description: 'ID of the segment to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segment workflow details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentOnWorkflowResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_on_workflow/{segmentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.segmentId: method.request.querystring.segmentId
        passthroughBehavior: when_no_match
        type: http
  /api/segment_list:
    get:
      tags:
        - Segments
      summary: 'Get all segments'
      description: "Retrieve segments by providing a Bearer token in the 'Authorization' header."
      operationId: segmentsListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segment listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/segment_archive/{segmentId}':
    post:
      tags:
        - Segments
      summary: 'Archived/unarchived segment filters'
      description: "Archived/unarchived the Segment by providing a Bearer token in the 'Authorization' header."
      operationId: segmentArchive
      parameters:
        -
          name: segmentId
          in: path
          description: 'ID of the segment to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/segmentArchiveRequest'
      responses:
        200:
          description: 'Archived/unarchived segment updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentArchiveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_archive/{segmentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.segmentId: method.request.querystring.segmentId
        passthroughBehavior: when_no_match
        type: http
  '/api/segment_delete/{segmentId}':
    get:
      tags:
        - Segments
      summary: 'Deleted segment filters'
      description: "Deleted the Segment by providing a Bearer token in the 'Authorization' header."
      operationId: segmentDelete
      parameters:
        -
          name: segmentId
          in: path
          description: 'ID of the segment to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Segment deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentDeleteResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/segment_delete/{segmentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.segmentId: method.request.querystring.segmentId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_segments/{clientId}':
    get:
      tags:
        - Segments
      summary: 'Get all client segments'
      description: "Retrieve client segments by providing a Bearer token in the 'Authorization' header."
      operationId: getClientSegments
      parameters:
        -
          name: clientId
          in: path
          description: 'ID of the client to retrieve'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'Search text'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client segments listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientSegmentsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_segments/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
        passthroughBehavior: when_no_match
        type: http
  /api/sequence_list:
    get:
      tags:
        - Sequence
      summary: 'Get Sequence Listing'
      description: "Retrieve sequence listing by providing a Bearer token in the 'Authorization' header."
      operationId: getSequenceList
      parameters:
        -
          name: company_id
          in: query
          description: 'Company ID (e.g., 17)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'Search text'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Sequence listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSequenceListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/sequence_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.company_id: method.request.querystring.company_id
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  /api/sequence_add:
    post:
      tags:
        - Sequence
      summary: 'Save Sequence'
      description: "Save the Sequence by providing a Bearer token in the 'Authorization' header."
      operationId: addSequence
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addSequenceRequest'
      responses:
        200:
          description: 'Sequence saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addSequenceResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/sequence_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/sequence_update/{sequenceId}':
    post:
      tags:
        - Sequence
      summary: 'Update Sequence'
      description: "Update the client Filter by providing a Bearer token in the 'Authorization' header."
      operationId: updateSequenceById
      parameters:
        -
          name: sequenceId
          in: path
          description: 'ID of the Sequence to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addSequenceRequest'
      responses:
        200:
          description: 'Sequence updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateSequenceByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/sequence_update/{sequenceId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.sequenceId: method.request.querystring.sequenceId
        passthroughBehavior: when_no_match
        type: http
  '/api/sms/{clientid}':
    get:
      tags:
        - 'Client SMS'
      summary: 'Get Client Sms'
      description: "Retrieve client Sms listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClientSms
      parameters:
        -
          name: clientid
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Sms listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientSmsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/sms/{clientid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientid: method.request.querystring.clientid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/send_sms/{clientId}':
    post:
      tags:
        - 'Client SMS'
      summary: 'Client sms send'
      description: "Save the Client sms send by providing a Bearer token in the 'Authorization' header."
      operationId: sendSMS
      parameters:
        -
          name: clientId
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/sendSMSRequest'
      responses:
        200:
          description: 'Client sms send saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendSMSResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/send_sms/{clientId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
        passthroughBehavior: when_no_match
        type: http
  /api/states:
    get:
      tags:
        - States
      summary: 'Get States Listing'
      description: "Retrieve states listing by providing a Bearer token in the 'Authorization' header."
      operationId: getStatesList
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'States listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStatesListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/states'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  /api/tags:
    get:
      tags:
        - Tags
      summary: 'Get Tags Listing'
      description: "Retrieve tags listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTagsList
      parameters:
        -
          name: company_id
          in: query
          description: 'company ID (e.g., 17)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Tags listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagsListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/tags'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.company_id: method.request.querystring.company_id
        passthroughBehavior: when_no_match
        type: http
  '/api/tag/{tagId}':
    get:
      tags:
        - Tags
      summary: 'Get Single Tag By Id'
      description: "Retrieve Tag by providing a Bearer token in the 'Authorization' header."
      operationId: show
      parameters:
        -
          name: tagId
          in: path
          description: 'tag ID (e.g., 2)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Tag Detail listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/showtagDetailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/tag/{tagId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.tag: method.request.querystring.tag
        passthroughBehavior: when_no_match
        type: http
  /api/task_category:
    get:
      tags:
        - 'Task Category'
      summary: 'get task category'
      description: "get task category by providing a Bearer token in the 'Authorization' header."
      operationId: taskCategory
      parameters:
        -
          name: search
          in: query
          description: 'Search text'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'Column name'
          required: false
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: false
          schema:
            type: string
            enum:
              - desc
              - asc
        -
          name: perpage
          in: query
          description: Perpage
          required: false
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskCategoryResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_category'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/task_category_add:
    post:
      tags:
        - 'Task Category'
      summary: 'Save Account Status'
      description: "Save the task category by providing a Bearer token in the 'Authorization' header."
      operationId: saveTaskCategory
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveTaskCategoryRequest'
      responses:
        200:
          description: 'Task category saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveTaskCategoryResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_category_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/task_category_update/{taskCategoryId}':
    post:
      tags:
        - 'Task Category'
      summary: 'Update task category'
      description: "Update the task category by providing a Bearer token in the 'Authorization' header."
      operationId: taskCategoryUpdate
      parameters:
        -
          name: taskCategoryId
          in: path
          description: 'ID of the filter to update task category'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveTaskCategoryRequest'
      responses:
        200:
          description: 'Task category updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskCategoryUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_category_update/{taskCategoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskCategoryId: method.request.querystring.taskCategoryId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_category/{taskCategoryId}':
    delete:
      tags:
        - 'Task Category'
      summary: 'Delete a task category by ID'
      description: 'Delete a task category by specifying the ID.'
      operationId: taskCategoryDestroy
      parameters:
        -
          name: taskCategoryId
          in: path
          description: 'ID of the task category to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task category deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskCategoryDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_category/{taskCategoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskCategoryId: method.request.querystring.taskCategoryId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_dropbox_categry/{taskCategoryId}':
    post:
      tags:
        - 'Task Category'
      summary: 'Update task dropdown category'
      description: "Update the task dropdown category by providing a Bearer token in the 'Authorization' header."
      operationId: taskDropboxCategory
      parameters:
        -
          name: taskCategoryId
          in: path
          description: 'ID of the filter to update task category'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/taskDropboxCategoryRequest'
      responses:
        200:
          description: 'Task dropdown category updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskDropboxCategoryResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_dropbox_categry/{taskCategoryId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskCategoryId: method.request.querystring.taskCategoryId
        passthroughBehavior: when_no_match
        type: http
  /api/task_category_list:
    get:
      tags:
        - 'Task Category'
      summary: 'Get all task category listing'
      description: "Retrieve task category by providing a Bearer token in the 'Authorization' header."
      operationId: taskCategoryList
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskCategoryListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_category_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/manage_result_tag/{documentId}':
    get:
      tags:
        - 'Task Category'
      summary: 'Get all task result tag listing'
      description: "Retrieve task result tag by providing a Bearer token in the 'Authorization' header."
      operationId: manageResultTag
      parameters:
        -
          name: documentId
          in: path
          description: 'ID of the filter file document'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task result tag listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manageResultTagResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/manage_result_tag/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  '/api/save_result_tags/{documentId}':
    post:
      tags:
        - 'Task Category'
      summary: 'Update task status'
      description: "Update the task Status by providing a Bearer token in the 'Authorization' header."
      operationId: saveResultTags
      parameters:
        -
          name: documentId
          in: path
          description: 'ID of the task to update task document '
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveResultTagsRequest'
      responses:
        200:
          description: 'Task status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveResultTagsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/save_result_tags/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  '/api/upload_document/{documentId}':
    post:
      tags:
        - 'Task Category'
      summary: 'upload documents as client documents'
      description: "Save the documents by providing a Bearer token in the 'Authorization' header."
      operationId: uploadDocument
      parameters:
        -
          name: documentId
          in: path
          description: 'ID of the task to update task document '
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/uploadDocumentRequest'
      responses:
        200:
          description: 'Document uploaded as a client document saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadDocumentResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/upload_document/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  '/api/remove_doc_from_client_document/{taskId}':
    post:
      tags:
        - 'Task Category'
      summary: 'Remove client document'
      description: "Remove client document by providing a Bearer token in the 'Authorization' header."
      operationId: removeDocFromClientDocument
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/removeDocFromClientDocumentRequest'
      responses:
        200:
          description: 'Client document remove successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/removeDocFromClientDocumentResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/remove_doc_from_client_document/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_details/{taskId}':
    get:
      tags:
        - 'Task detail'
      summary: 'Get task details by ID'
      description: "Retrieve a task by providing a Bearer token in the             'Authorization' header."
      operationId: taskDetails
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task to retrieve'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task details listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskDetailsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_details/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_status_update/{taskId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Update task status'
      description: "Update the task Status by providing a Bearer token in the 'Authorization' header."
      operationId: taskStatusUpdate
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task to update task Status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/taskStatusUpdateRequest'
      responses:
        200:
          description: 'Task status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_status_update/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  /api/add_objective:
    post:
      tags:
        - 'Task detail'
      summary: 'Add task objectives'
      description: "Save the task objectives by providing a Bearer token in the 'Authorization' header."
      operationId: addObjective
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addObjectiveRequest'
      responses:
        200:
          description: 'Task objectives saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addObjectiveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_objective'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_objective/{objectiveId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Update task objective'
      description: "Update the task objective by providing a Bearer token in the 'Authorization' header."
      operationId: taskObjectiveUpdate
      parameters:
        -
          name: objectiveId
          in: path
          description: 'ID of the task to update task objective'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addObjectiveRequest'
      responses:
        200:
          description: 'Task objectives updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskObjectiveUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_objective/{objectiveId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.objectiveId: method.request.querystring.objectiveId
        passthroughBehavior: when_no_match
        type: http
  '/api/deleteObjective/{objectiveId}':
    delete:
      tags:
        - 'Task detail'
      summary: 'Delete a objective by ID'
      description: 'Delete a Account Status by specifying the ID.'
      operationId: destroyObjective
      parameters:
        -
          name: objectiveId
          in: path
          description: 'ID of the task objective to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task objectives deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroyObjectiveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/deleteObjective/{objectiveId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.objectiveId: method.request.querystring.objectiveId
        passthroughBehavior: when_no_match
        type: http
  '/api/mark_objective/{objectiveId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Mark task objective as completed'
      description: "Update the task objective as completed by providing a Bearer token in the 'Authorization' header."
      operationId: markCompleteObjective
      parameters:
        -
          name: objectiveId
          in: path
          description: 'ID of the task objectives to update task objective status'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task objective mark as completed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/markCompleteObjectiveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/mark_objective/{objectiveId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.objectiveId: method.request.querystring.objectiveId
        passthroughBehavior: when_no_match
        type: http
  /api/add_message:
    post:
      tags:
        - 'Task detail'
      summary: 'Add message on task'
      description: "Save the task message by providing a Bearer token in the 'Authorization' header."
      operationId: storeMessage
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/storeMessageRequest'
      responses:
        200:
          description: 'Task message saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storeMessageResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_message'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/delete_message/{messageId}':
    delete:
      tags:
        - 'Task detail'
      summary: 'Delete a task message by ID'
      description: 'Delete a task message by specifying the ID.'
      operationId: destroyMessage
      parameters:
        -
          name: messageId
          in: path
          description: 'ID of the task message to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task task message deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/destroyMessageResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/delete_message/{messageId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.messageId: method.request.querystring.messageId
        passthroughBehavior: when_no_match
        type: http
  '/api/update_task/{taskId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Task update'
      description: "Update the task by providing a Bearer token in the 'Authorization' header."
      operationId: taskUpdate
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task detail'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/taskUpdateRequest'
      responses:
        200:
          description: 'Task detail updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskUpdateeResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_task/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/upload_task_file/{taskId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Task file update'
      description: "Update the task file by providing a Bearer token in the 'Authorization' header."
      operationId: taskFileUpload
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/taskFileUploadRequest'
      responses:
        200:
          description: 'Task file uploaded successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskFileUploadResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/upload_task_file/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/file_remove/{fileId}':
    delete:
      tags:
        - 'Task detail'
      summary: 'Delete a task file by ID'
      description: 'Delete a task file by specifying the ID.'
      operationId: removeFile
      parameters:
        -
          name: fileId
          in: path
          description: 'ID of the task file to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task file deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/removeFileResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/file_remove/{fileId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.fileId: method.request.querystring.fileId
        passthroughBehavior: when_no_match
        type: http
  '/api/assign_task_tags/{taskId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Task tags update'
      description: "Update the tags on task by providing a Bearer token in the 'Authorization' header."
      operationId: assignTaskTag
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the task detail'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/assignTaskTagRequest'
      responses:
        200:
          description: 'Task tags updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assignTaskTagResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/assign_task_tags/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/change_document_status/{documentId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Task tags update'
      description: "Update the document status update by providing a Bearer token in the 'Authorization' header."
      operationId: changeDocumentStatus
      parameters:
        -
          name: documentId
          in: path
          description: 'ID of the task document status update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/changeDocumentStatusRequest'
      responses:
        200:
          description: 'Task document status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/changeDocumentStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/change_document_status/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  '/api/save_document_cat/{documentId}':
    post:
      tags:
        - 'Task detail'
      summary: 'Task tags update'
      description: "Update the document category update by providing a Bearer token in the 'Authorization' header."
      operationId: saveDocumentCat
      parameters:
        -
          name: documentId
          in: path
          description: 'ID of the task document category update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveDocumentCatRequest'
      responses:
        200:
          description: 'Task document category updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveDocumentCatResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/save_document_cat/{documentId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.documentId: method.request.querystring.documentId
        passthroughBehavior: when_no_match
        type: http
  /api/task_filter:
    post:
      tags:
        - 'Task detail'
      summary: 'Get a filtered task'
      description: "Retrieve a filtered task by providing a Bearer token in the 'Authorization' header."
      operationId: tasksListing
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Tasks retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasksListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_filter'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/task_tags:
    get:
      tags:
        - Tags
      summary: 'Get Task Tags Listing'
      description: "Retrieve Task tags listing by providing a Bearer token in the 'Authorization' header."
      operationId: taskTagsListing
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task tags listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskTagsListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_tags'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_task_tag:
    post:
      tags:
        - Tags
      summary: 'Add new task tag'
      description: "Save the task tag by providing a Bearer token in the 'Authorization' header."
      operationId: addTaskTag
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addTaskTagRequest'
      responses:
        200:
          description: 'New task tag add successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addTaskTagResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_task_tag'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_task_tag/{tagId}':
    post:
      tags:
        - Tags
      summary: 'Update task tag'
      description: "Update the task tag by providing a Bearer token in the 'Authorization' header."
      operationId: updateTaskTagById
      parameters:
        -
          name: tagId
          in: path
          description: 'ID of the filter to update task tag'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addTaskTagRequest'
      responses:
        200:
          description: 'Task tag updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateTaskTagByIdResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_task_tag/{tagId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.tagId: method.request.querystring.tagId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_tag/{tagId}':
    delete:
      tags:
        - Tags
      summary: 'Delete a task tag  by ID'
      description: 'Delete a task tag by specifying the tag ID.'
      operationId: taskTagDestroy
      parameters:
        -
          name: tagId
          in: path
          description: 'ID of the filter to update task tag'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task tag deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskTagDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_tag/{tagId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.tagId: method.request.querystring.tagId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_tasks/{clientId}/{status}':
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Tasks'
      description: "Retrieve tasks listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTasks
      parameters:
        -
          name: clientId
          in: path
          description: 'Client ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: status
          in: path
          description: 'Client ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Tasks listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTaskssResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_tasks/{clientId}/{status}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.clientId: method.request.querystring.clientId
          integration.request.path.status: method.request.querystring.status
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_tasks/{taskId}':
    delete:
      tags:
        - 'Client Tasks'
      summary: 'Delete a client task by ID'
      description: 'Delete a client agreement by specifying the task ID.'
      operationId: deleteClientTasks
      parameters:
        -
          name: taskId
          in: path
          description: 'ID of the client task to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Tasks deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteClientTasksResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_tasks/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  '/api/task_tags/{projectId}':
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Tasks tags by comapny Id'
      description: "Retrieve tasks tag listing by providing a Bearer token in the\n     * 'Authorization' header."
      operationId: getTaskTags
      parameters:
        -
          name: projectId
          in: path
          description: 'Client ID (e.g., 17)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: ' Tasks listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTaskTagsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_tags/{projectId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.projectId: method.request.querystring.projectId
        passthroughBehavior: when_no_match
        type: http
  /api/dropbox_add_setting:
    post:
      tags:
        - 'Client Tasks'
      summary: 'Save Dropbox setting'
      description: "Save the Dropbox setting by providing a Bearer token in the 'Authorization' header."
      operationId: dropBoxSettngsTasks
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/dropBoxSettngsTaskslRequest'
      responses:
        200:
          description: 'Dropbox setting saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dropBoxSettngsTasksResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/dropbox_add_setting'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/dropbox_detail:
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get dropbox detail'
      description: "Retrieve a dropbox detail with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: getDropboxDetail
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Dropbox Detail listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDropboxDetailResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/dropbox_detail'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/task_add:
    post:
      tags:
        - 'Client Tasks'
      summary: 'Save tasks'
      description: "Save the tasks Filter by providing a Bearer token in the 'Authorization' header."
      operationId: addNewTasks
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addNewTasksRequest'
      responses:
        200:
          description: 'Task saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addNewTasksResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/delete_all_checked_task:
    post:
      tags:
        - 'Client Tasks'
      summary: 'Delete all checked Task'
      description: "Update the Task by providing a Bearer token in the 'Authorization' header."
      operationId: deleteAllCheckedTask
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/deleteAllCheckedTaskRequest'
      responses:
        200:
          description: 'All checked IDs Task deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAllCheckedTaskResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/delete_all_checked_task'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/my_tasks/{userId}/{status}':
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Tasks'
      description: "Retrieve my tasks listing by providing a Bearer token in the 'Authorization' header."
      operationId: getMyTaskList
      parameters:
        -
          name: userId
          in: path
          description: 'User ID (e.g., 1600)'
          required: true
          schema:
            type: integer
        -
          name: status
          in: path
          description: 'Client ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'My Tasks listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMyTaskListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/my_tasks/{userId}/{status}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.userId: method.request.querystring.userId
          integration.request.path.status: method.request.querystring.status
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/task_tag_list:
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Task tags'
      description: "Retrieve my tasks tags listing by providing a Bearer token in the 'Authorization' header."
      operationId: taskTagList
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'My Tasks tag listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMyTaskListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_tag_list'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_user_to_task:
    post:
      tags:
        - 'Client Tasks'
      summary: 'add user to task'
      description: "User has been added to the task by providing a Bearer token in the 'Authorization' header."
      operationId: addUserToTask
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addUserToTaskRequest'
      responses:
        200:
          description: 'The user has been successfully added to the task.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addUserToTaskResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_user_to_task'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/task_tags_list/{taskId}':
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Task Tags detail'
      description: "Retrieve a Task Tags with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: getTaskTagsList
      parameters:
        -
          name: taskId
          in: path
          description: 'task ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task Tags listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTaskTagsListResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_tags_list/{taskId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskId: method.request.querystring.taskId
        passthroughBehavior: when_no_match
        type: http
  /api/associated_client:
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get dropbox detail'
      description: "Retrieve a associated Clients with providing a Bearer\n     * token in the 'Authorization' header."
      operationId: associatedClient
      parameters:
        -
          name: search
          in: query
          description: 'search  (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Associated Clients listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/associatedClientResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/associated_client'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
        passthroughBehavior: when_no_match
        type: http
  /api/task_activity:
    get:
      tags:
        - 'Client Tasks'
      summary: 'Get Tasks Activity'
      description: "Retrieve tasks Activity listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTaskActivityList
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Tasks Activity listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTaskActivityListsResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/task_activity'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/delete_user_from_task/{taskUserID}':
    delete:
      tags:
        - 'Client Tasks'
      summary: 'Delete a user from task by ID'
      description: 'Delete a user from task by specifying the ID.'
      operationId: deleteUserFromTask
      parameters:
        -
          name: taskUserID
          in: path
          description: 'ID of the task user to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task user deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteUserFromTaskResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/delete_user_from_task/{taskUserID}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.taskUserID: method.request.querystring.taskUserID
        passthroughBehavior: when_no_match
        type: http
  /api/template_category:
    get:
      tags:
        - Templates
      summary: 'Get Template Category Listing'
      description: "Retrieve Template Category listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTemplateCategoryListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Template Category listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateCategoryResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/template_category'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/email_templates:
    get:
      tags:
        - Templates
      summary: 'Get Template'
      description: "Retrieve All template listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTemplatesListing
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Template listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTemplatesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/email_templates'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/templates/{type}/{category}':
    get:
      tags:
        - Templates
      summary: 'Get Templates'
      description: "Retrieve a filtered Templates by providing a Bearer token in the 'Authorization' header."
      operationId: getTemplatesByTypeAndCat
      parameters:
        -
          name: type
          in: path
          description: 'type (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: category
          in: path
          description: 'category (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Template retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTemplatesByTypeAndCatResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/templates/{type}/{category}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.type: method.request.querystring.type
          integration.request.path.category: method.request.querystring.category
        passthroughBehavior: when_no_match
        type: http
  '/api/get_templates/{type}':
    post:
      tags:
        - Templates
      summary: 'Get Templates by type'
      description: "Retrieve template by type listing by providing a Bearer token in the 'Authorization' header."
      operationId: getTemplatesTypeListing
      parameters:
        -
          name: type
          in: path
          description: 'type (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Templates Filter listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTemplatesTypeListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/get_templates/{type}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.type: method.request.header.type
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/template/{templateId}':
    delete:
      tags:
        - Templates
      summary: 'Delete a Template by ID'
      description: 'Delete a Template  by specifying the task ID.'
      operationId: deleteTemplate
      parameters:
        -
          name: templateId
          in: path
          description: 'ID of the Template to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Templates deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteTemplateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/template/{templateId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.templateId: method.request.header.templateId
        passthroughBehavior: when_no_match
        type: http
  '/api/template_preview/{templateId}':
    get:
      tags:
        - Templates
      summary: 'Get preview Templates by type'
      description: "Retrieve preview template by type listing by\n     * providing a Bearer token in the 'Authorization' header."
      operationId: previewTemplate
      parameters:
        -
          name: templateId
          in: path
          description: 'type (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Preview Templates Detail successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/previewTemplateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/template_preview/{templateId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.templateId: method.request.header.templateId
        passthroughBehavior: when_no_match
        type: http
  /api/add_template:
    post:
      tags:
        - Templates
      summary: 'Save Template'
      description: "Save Template by providing a Bearer token in the 'Authorization' header."
      operationId: storeTemplate
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/storeTemplateRequest'
      responses:
        200:
          description: 'Template saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storeTemplateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_template'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/update_template/{templateId}':
    post:
      tags:
        - Templates
      summary: 'Update templateId'
      description: "Update the Template by providing a Bearer token in the 'Authorization' header."
      operationId: updateTemplate
      parameters:
        -
          name: templateId
          in: path
          description: 'ID of the Template to update'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/storeTemplateRequest'
      responses:
        200:
          description: 'Template updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateTemplateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/update_template/{templateId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.templateId: method.request.querystring.templateId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_notes/{uniqueAccid}':
    get:
      tags:
        - 'Client Notes'
      summary: 'Get Client Notes'
      description: "Retrieve client notes listing by providing a Bearer token in the 'Authorization' header."
      operationId: getClientNotes
      parameters:
        -
          name: uniqueAccid
          in: path
          description: 'Unique Account ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Notes listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClientNotesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_notes/{uniqueAccid}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueAccid: method.request.querystring.uniqueAccid
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/client_notes/{uniquenNoteId}':
    delete:
      tags:
        - 'Client Notes'
      summary: 'Delete a client notes by ID'
      description: 'Delete a client notes by specifying the agreement ID.'
      operationId: deleteClientNotes
      parameters:
        -
          name: uniquenNoteId
          in: path
          description: 'Unique note ID (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Notes deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteClientNotesResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_notes/{uniquenNoteId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniquenNoteId: method.request.querystring.uniquenNoteId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_notes/noteStatusUpdate/{uniqueId}/{uniqueNoteId}/{status}':
    post:
      tags:
        - 'Client Notes'
      summary: 'Update Client Note'
      description: "Update the client Filter by providing a Bearer token in the 'Authorization' header."
      operationId: updateClientNote
      parameters:
        -
          name: uniqueNoteId
          in: path
          description: 'Unique note ID'
          required: true
          schema:
            type: integer
        -
          name: uniqueId
          in: path
          description: 'uniqueId of the filter to update filter'
          required: true
          schema:
            type: integer
        -
          name: status
          in: path
          description: 'Status of client note'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Client Notes status update successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateClientNoteResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_notes/noteStatusUpdate/{uniqueId}/{uniqueNoteId}/{status}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniqueId: method.request.querystring.uniqueId
          integration.request.path.uniqueNoteId: method.request.querystring.uniqueNoteId
          integration.request.path.status: method.request.querystring.status
        passthroughBehavior: when_no_match
        type: http
  '/api/client_note_add/{uniquenNoteId}':
    post:
      tags:
        - 'Client Notes'
      summary: 'Add user '
      description: "Save the user by providing a Bearer token in the 'Authorization' header."
      operationId: noteAdd
      parameters:
        -
          name: uniquenNoteId
          in: path
          description: 'Unique note ID'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/noteAddRequest'
      responses:
        200:
          description: 'Note added successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noteAddResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_note_add/{uniquenNoteId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniquenNoteId: method.request.querystring.uniquenNoteId
        passthroughBehavior: when_no_match
        type: http
  '/api/client_note_edit/{uniquenNoteId}/{noteId}':
    post:
      tags:
        - 'Client Notes'
      summary: noteEdit
      description: "Update the note by providing a Bearer token in the 'Authorization' header."
      operationId: noteEdit
      parameters:
        -
          name: uniquenNoteId
          in: path
          description: 'Unique account id of the filter to update note'
          required: true
          schema:
            type: integer
        -
          name: noteId
          in: path
          description: 'Id of the filter to update note'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/noteEditRequest'
      responses:
        200:
          description: 'Note updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noteEditResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/client_note_edit/{uniquenNoteId}/{noteId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.uniquenNoteId: method.request.querystring.uniquenNoteId
          integration.request.path.noteId: method.request.querystring.noteId
        passthroughBehavior: when_no_match
        type: http
  /api/batch_print_notifications:
    post:
      tags:
        - Users
      summary: 'List pending batch print'
      description: "List pending batch print by providing a Bearer token in the 'Authorization' header."
      operationId: enqueueBatchPrint
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Pending batch print listed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enqueueBatchPrintResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/batch_print_notifications'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/user_filters:
    post:
      tags:
        - Users
      summary: 'Get a filtered User management'
      description: "Retrieve a filtered User management by providing a Bearer token in the 'Authorization' header."
      operationId: usersFilterListing
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'User management retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersFilterListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/user_filters'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/add_user:
    post:
      tags:
        - Users
      summary: 'Add user '
      description: "Save the user by providing a Bearer token in the 'Authorization' header."
      operationId: addNewUser
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addNewUserRequest'
      responses:
        200:
          description: 'New user saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addNewUserResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/add_user'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/user_update/{userId}':
    post:
      tags:
        - Users
      summary: 'Update user'
      description: "Update the user detail by providing a Bearer token in the 'Authorization' header."
      operationId: userUpdate
      parameters:
        -
          name: userId
          in: path
          description: 'ID of the filter to update user'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addNewUserRequest'
      responses:
        200:
          description: 'User updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/user_update/{userId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.userId: method.request.querystring.userId
        passthroughBehavior: when_no_match
        type: http
  '/api/password_reset/{userId}':
    post:
      tags:
        - Users
      summary: 'Reset user password'
      description: "Update the reset user password by providing a Bearer token in the 'Authorization' header."
      operationId: userPasswordReset
      parameters:
        -
          name: userId
          in: path
          description: 'ID of the filter to update user'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/userPasswordResetRequest'
      responses:
        200:
          description: 'User password Reset successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userPasswordResetResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/password_reset/{userId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.userId: method.request.querystring.userId
        passthroughBehavior: when_no_match
        type: http
  '/api/user_status_update/{userId}':
    post:
      tags:
        - Users
      summary: 'Update user'
      description: "Update the user status by providing a Bearer token in the 'Authorization' header."
      operationId: updateStatus
      parameters:
        -
          name: userId
          in: path
          description: 'ID of the filter to update user'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/updateStatusRequest'
      responses:
        200:
          description: 'User status updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateStatusResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/user_status_update/{userId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.userId: method.request.querystring.userId
        passthroughBehavior: when_no_match
        type: http
  /api/users:
    get:
      tags:
        - Users
      summary: 'Get all users'
      description: "Retrieve all users by providing a Bearer token in the 'Authorization' header."
      operationId: getUsers
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Users retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsersResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/users'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
        passthroughBehavior: when_no_match
        type: http
  /api/wordphrases:
    get:
      tags:
        - 'Word Phrases'
      summary: 'Get all wordphrases'
      description: "Retrieve wordphrases by providing a Bearer token in the 'Authorization' header."
      operationId: wordphrasesListing
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g., test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Wordphrases listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordphrasesListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/wordphrases'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  /api/wordphrase_add:
    post:
      tags:
        - 'Word Phrases'
      summary: 'Add Wordphrase'
      description: "Save the Wordphrase by providing a Bearer token in the 'Authorization' header."
      operationId: saveWordphrase
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveWordphraseRequest'
      responses:
        200:
          description: 'Wordphrases saved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveWordphraseResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/wordphrase_add'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  '/api/wordphrase_update/{wordphraseId}':
    post:
      tags:
        - 'Word Phrases'
      summary: 'Update Wordphrase'
      description: "Update the Wordphrase by providing a Bearer token in the 'Authorization' header."
      operationId: wordphraseUpdate
      parameters:
        -
          name: wordphraseId
          in: path
          description: 'ID of the filter to update Wordphrase'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/saveWordphraseRequest'
      responses:
        200:
          description: 'Wordphrases updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordphraseUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/wordphrase_update/{wordphraseId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.wordphraseId: method.request.querystring.wordphraseId
        passthroughBehavior: when_no_match
        type: http
  '/api/wordphrases/{wordphraseId}':
    delete:
      tags:
        - 'Word Phrases'
      summary: 'Delete a Wordphrase by ID'
      description: 'Delete a Wordphrase by specifying the ID.'
      operationId: wordphrasesDestroy
      parameters:
        -
          name: wordphraseId
          in: path
          description: 'ID of the Wordphrase to delete'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Wordphrases deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordphrasesDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Delete
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/wordphrases/{wordphraseId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.header.wordphraseId: method.request.querystring.wordphraseId
        passthroughBehavior: when_no_match
        type: http
  /api/workflow:
    get:
      tags:
        - 'Client Workflow'
      summary: 'Get all workflows'
      description: "Retrieve a filters of workflows by providing a Bearer token in the 'Authorization' header."
      operationId: getWorkflowListing
      parameters:
        -
          name: search
          in: query
          description: 'search (e.g. test)'
          required: false
          schema:
            type: string
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Workflows filter listing successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWorkflowListingResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Get
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.querystring.search: method.request.querystring.search
          integration.request.querystring.sort_column: method.request.querystring.sort_column
          integration.request.querystring.sort_direction: method.request.querystring.sort_direction
          integration.request.querystring.perpage: method.request.querystring.perpage
        passthroughBehavior: when_no_match
        type: http
  '/api/workflow_status_update/{id}':
    post:
      tags:
        - 'Client Workflow'
      summary: 'Update workflow filters'
      description: "Update the workflow Filter by providing a Bearer token in the 'Authorization' header."
      operationId: workflowStatusUpdate
      parameters:
        -
          name: id
          in: path
          description: 'ID of the filter to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/workflowStatusUpdateRequest'
      responses:
        200:
          description: 'Workflows filter updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowStatusUpdateResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_status_update/{id}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.id: method.request.querystring.id
        passthroughBehavior: when_no_match
        type: http
  '/api/workflow_delete/{id}':
    post:
      tags:
        - 'Client Workflow'
      summary: 'Delete a workflow filter by ID'
      description: 'Delete a workflow filter by specifying the workflow ID.'
      operationId: workflowDestroy
      parameters:
        -
          name: id
          in: path
          description: 'ID of the filter to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/workflowDestroyRequest'
      responses:
        200:
          description: 'Workflows filter deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowDestroyResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_delete/{id}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.id: method.request.querystring.id
        passthroughBehavior: when_no_match
        type: http
  '/api/workflow_filter/{status}/{workflowType}':
    post:
      tags:
        - 'Client Workflow'
      summary: 'Get a filtered workflow'
      description: "Retrieve a filtered workflow by providing a Bearer token in the 'Authorization' header."
      operationId: workflowFilter
      parameters:
        -
          name: sort_column
          in: query
          description: 'sort_column field (e.g., id)'
          required: true
          schema:
            type: string
        -
          name: sort_direction
          in: query
          description: 'Sort direction (asc or desc)'
          required: true
          schema:
            type: string
            enum:
              - asc
              - desc
        -
          name: page
          in: query
          description: 'Page number (e.g., 1)'
          required: true
          schema:
            type: integer
        -
          name: perpage
          in: query
          description: 'Items per page (e.g., 10)'
          required: true
          schema:
            type: integer
        -
          name: status
          in: path
          description: 'Status of the workflow'
          required: true
          schema:
            type: integer
        -
          name: workflowType
          in: path
          description: 'Type of the workflow'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Workflows retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowFilterResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_filter/{status}/{workflowType}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.status: method.request.querystring.status
          integration.request.path.workflowType: method.request.querystring.workflowType
        passthroughBehavior: when_no_match
        type: http
  '/api/workflow_archive/{workflowId}':
    post:
      tags:
        - 'Client Workflow'
      summary: 'Archived/unarchived workflow filters'
      description: "Archived/unarchived the Workflow by providing a Bearer token in the 'Authorization' header."
      operationId: workflowArchive
      parameters:
        -
          name: workflowId
          in: path
          description: 'ID of the workflow to update filter'
          required: true
          schema:
            type: integer
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/workflowArchiveRequest'
      responses:
        200:
          description: 'Archived/unarchived workflow updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowArchiveResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_archive{workflowId}'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
          integration.request.path.workflowId: method.request.querystring.workflowId
        passthroughBehavior: when_no_match
        type: http
  /api/workflow_segment_client_count:
    post:
      tags:
        - 'Client Workflow'
      summary: 'Get a filtered workflow Segment Client Count'
      description: "Retrieve a filtered segment workflow client\n     * count by providing a Bearer token in the 'Authorization' header."
      operationId: workflowSegmentClientCount
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdvancedFilteredRequest'
      responses:
        200:
          description: 'Segment workflow client count retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowSegmentClientCountResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/workflow_segment_client_count'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/webservice/add_client:
    post:
      tags:
        - Clients
      summary: 'Add client webservice'
      description: "Save the Client by providing a Bearer token in the             'Authorization' header."
      operationId: addClient
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addClientRequest'
      responses:
        200:
          description: 'Client added successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addClientResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/webservice/add_client'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/webservice/edit_client:
    post:
      tags:
        - Clients
      summary: 'Edit client webservice'
      description: "Update the Client by providing a Bearer token in the'Authorization' header."
      operationId: editClient
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addClientRequest'
      responses:
        200:
          description: 'Client updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/editClientResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/webservice/edit_client'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /api/webservice/client:
    post:
      tags:
        - Clients
      summary: 'Add/Edit client webservice'
      description: "Insert or update the Client by providing a Bearer token in the 'Authorization' header."
      operationId: upsertClient
      parameters:
        -
          name: x-api-key
          in: header
          required: true
          schema:
            type: string
        -
          name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: 'Resource data'
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/addClientRequest'
      responses:
        200:
          description: 'Client added/updated successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upsertClientResponse200'
        401:
          description: Unauthorized
      security:
        -
          api_key: []
      x-amazon-apigateway-integration:
        httpMethod: Post
        uri: 'https://api-dev2.thecreditpros.com/portal2/api/webservice/client'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.x-api-key: method.request.header.x-api-key
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
components:
  schemas:
    companyInfoGetResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Company information getting successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAccountResponsibilityRequest:
      properties:
        search:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: id
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1600'
                type: object
          type: object
      type: object
    getAccountResponsibilitiesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Responsibilities listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveAccountResponsibilityRequest:
      properties:
        responsibility:
          type: string
          format: responsibility
          example: ''
      type: object
    accountResponsibilityUpdateRequest:
      properties:
        responsibility:
          type: string
          format: responsibility
          example: ''
      type: object
    saveAccountResponsibilityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Responsibilities saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    UpdateAccountResponsibilityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Responsibility updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    accountResponsibilityDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Responsibility deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllAccountResponsibilitiesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Responsibilities listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateClientPersonalInfoPostResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client personal information updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientPersonalInfoResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client personal information getting successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateClientPersonalInfoPostRequest:
      properties:
        first_name:
          type: string
          format: first_name
          example: ''
        last_name:
          type: string
          format: last_name
          example: ''
        email:
          type: string
          format: email
          example: ''
        phone_mobile:
          type: string
          format: phone_mobile
          example: ''
        sms_opt_out:
          type: boolean
          format: sms_opt_out
          example: ''
        ssn:
          type: string
          format: ssn
          example: ''
        dob:
          type: string
          format: dob
          example: ''
        address_one:
          type: boolean
          format: address_one
          example: ''
        city:
          type: string
          format: city
          example: ''
        state:
          type: string
          format: state
          example: ''
        zipcode:
          type: boolean
          format: zipcode
          example: ''
        mailing_address_one:
          type: string
          format: mailing_address_one
          example: ''
        mailing_city:
          type: string
          format: mailing_city
          example: ''
        mailing_state:
          type: boolean
          format: mailing_state
          example: ''
        mailing_zipcode:
          type: string
          format: mailing_zipcode
          example: ''
      type: object
    updateClientPasswordPostResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client password updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateClientPasswordPostRequest200:
      properties:
        password:
          type: string
          format: password
          example: Testing@123
      type: object
    getClientItemActivityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Item activity listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientActivityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client activity listing retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getLetterOfReferenceResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Letter of Reference listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientTUAlertResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tu client Alert listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientEXPAlertResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'EXP client Alert listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientEFXAlertResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Efx client Alert listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getEfxAlertDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Equifax alert detail listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTUAlertDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Transunion alert detail listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getExpAlertDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Experian alert detail listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientAuditsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client audit listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    unsignedClientAgreementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client unsigned agreement listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateAgreementRequest:
      properties:
        agreement_data:
          type: string
          format: agreement_data
          example: ''
        terms_and_conditions_checked:
          type: string
          format: terms_and_conditions_checked
          example: ''
      type: object
    updateAgreementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client agreement signed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updatePersonalInfoRequest:
      properties:
        step:
          type: number
          format: step
          example: ''
        first_name:
          type: string
          format: first_name
          example: ''
        last_name:
          type: string
          format: last_name
          example: ''
        email:
          type: string
          format: email
          example: ''
        phone_number:
          type: string
          format: phone_number
          example: ''
        dob:
          type: string
          format: dob
          example: ''
        ssn:
          type: string
          format: ssn
          example: ''
      type: object
    updatePersonalInfoResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Update client personal information successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateAddressInfoRequest:
      properties:
        step:
          type: number
          format: step
          example: ''
        address_one:
          type: string
          format: address_one
          example: ''
        city:
          type: string
          format: city
          example: ''
        state:
          type: string
          format: state
          example: ''
        zipcode:
          type: string
          format: zipcode
          example: ''
        mailing_address_one:
          type: string
          format: mailing_address_one
          example: ''
        mailing_city:
          type: string
          format: mailing_city
          example: ''
        mailing_state:
          type: string
          format: mailing_state
          example: ''
        mailing_country:
          type: string
          format: mailing_country
          example: ''
        mailing_zipcode:
          type: string
          format: mailing_zipcode
          example: ''
      type: object
    updateAddressInfoResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Update client address information successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateLoginMethodRequest:
      properties:
        step:
          type: number
          format: step
          example: ''
        login_prefrence:
          type: string
          format: login_prefrence
          example: ''
        password:
          type: string
          format: password
          example: ''
        password_confirmation:
          type: string
          format: password_confirmation
          example: ''
      type: object
    updateLoginMethodResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Update client login method successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getInterviewQuestionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client interview questions listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    submitInterviewAnswerRequest:
      properties:
        data:
          type: string
          format: data
          example: ''
      type: object
    submitInterviewAnswerResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client interview submited successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    negativeItemForVerificationResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client negative item listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    submitVerifiedItemRequest:
      properties:
        data:
          type: string
          format: data
          example: ''
      type: object
    submitVerifiedItemResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client verified item submited successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientLegalContractsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client legal contracts listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    ClientLegalContractsDetailsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client legal agreement details successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFrontClientLettersResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client letters listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientReviewResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Review listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAuditReviewFileDataResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Audit Review File Data listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    financeGoalsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Financial goals listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFinanceGoalResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Finance goals retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    setFinanceGoalRequest:
      properties:
        client_id:
          type: number
          format: client_id
          example: ''
        goal_id:
          type: number
          format: goal_id
          example: ''
      type: object
    setFinanceGoalResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Finance goal saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBillingPlanResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing plan listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getContactInfoResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Contact information getting successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCreditReportResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client credit report listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientTUScoreResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tu client Score listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientEXPScoreResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'EXP client Score listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientEFXScoreResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'EFX client Score listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getMonthScoreResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client month Scores listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemTypeCountResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'All item type Count listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTransunionScoreResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client transunion score listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTransunionItemResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Transunion item type Count listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getclientPaymentHistoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Payment history retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getclientDerogatoryMarksResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Credit derogatory marks All three beauro retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientTotalAccountsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'All item credit total accounts listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientCreditInquriesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Age of credit inquiries All three beauro listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCreditCardUtilizationResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'All item credit card utilization listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientAgeOfCreditHistoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Age of credit card history All three beauro listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getDebtAnalysisTransunionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client transunion debt analysis listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getDebtAnalysisEquifaxResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client equifax debt analysis listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getDebtAnalysisExperianResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client experian debt analysis listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getDisputeInfoFutureEventsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client future events listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getGlobalSearchResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Global search getting successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getIDPcountResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Idp cover count retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientIdpTypeListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Idp type list retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientIdpTypeDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Idp type detail retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    removeIDPResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Idp type delete successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addIdpRequest:
      properties:
        record_type:
          type: number
          format: record_type
          example: ''
        record_type_name:
          type: string
          format: record_type_name
          example: ''
      type: object
    addIdpResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Identity protection saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateIdpRequest:
      properties:
        record_type:
          type: number
          format: record_type
          example: ''
        record_type_name:
          type: string
          format: record_type_name
          example: ''
      type: object
    updateIdpResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Identity protection update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemsManagerResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Dispute Items listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    doNotDisputeItemRequest:
      properties:
        status_id:
          type: string
          format: status_id
          example: '{0,1}'
        client_id:
          type: string
          format: client_id
          example: '1600'
      type: object
    doNotDisputeItemResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item dispute status Updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    ItemDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item detail listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientNotificationResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'client Notification listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientsPaymentDetailsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client payment details listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addCreditCardRequest:
      properties:
        credit_card_type:
          type: string
          format: credit_card_type
          example: visa
        action:
          type: string
          format: action
          example: credit-card-information
        credit_card_number:
          type: string
          format: credit_card_number
          example: '4111111111111111'
        credit_card_security_code:
          type: integer
          format: credit_card_security_code
          example: '589'
        credit_card_expire_year:
          type: integer
          format: credit_card_expire_year
          example: '2025'
        credit_card_expire_month:
          type: integer
          format: credit_card_expire_month
          example: '1'
      type: object
    addCreditCardResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Credit card added successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    experianBoostResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Experian boost listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateExperianBoostRequest:
      properties:
        id:
          type: string
          format: id
          example: '98'
        page_content:
          type: string
          format: page_content
          example: 'Credit Card'
      type: object
    updateExperianBoostResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Experian boost update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    buildCreditResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Build credit retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateBuildCreditRequest:
      properties:
        id:
          type: string
          format: id
          example: '98'
        page_content:
          type: string
          format: page_content
          example: 'Credit Card'
        iframe_link:
          type: string
          format: iframe_link
          example: 'Credit Card'
      type: object
    updateBuildCreditResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Build credit update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    delteClientDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Document deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    PostClientActivityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client activity listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientActivityExportResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client activity exports successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemActivityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item activity listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    totalActivityRequest:
      properties:
        search:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: id
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1600'
                type: object
          type: object
      type: object
    totalActivityExportRequest:
      properties:
        search:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: id
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1600'
                type: object
          type: object
      type: object
    totalActivityResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Activity listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    totalActivityExportResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Activity exports successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client document listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    loginRequest:
      properties:
        email:
          type: string
          format: email
          example: itei.test6@gmail.com
        password:
          type: string
          format: password
          example: 'Test@#123'
        company_id:
          type: string
          format: company_id
          example: '17'
      type: object
    loginResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User logged in successfully.'
        code:
          type: integer
          example: '200'
        authorisation:
          type: object
        token:
          type: string
          example: your_jwt_token_here
        type:
          type: string
          example: bearer
      type: object
    logoutUserResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User logged out successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    refreshTokenResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Token refreshed successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    requestOtpResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'OTP request successful.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    requestOtpRequest:
      properties:
        email:
          type: string
          format: email
          example: itei.test6@gmail.com
      type: object
    verifyOtpRequest:
      properties:
        email:
          type: string
          format: email
          example: itei.test6@gmail.com
        otp:
          type: string
          format: otp
          example: '1234'
      type: object
    verifyOtpResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'OTP verification successful.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBillingStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBillingStatusListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBillingStatusRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        is_default:
          type: integer
          format: is_default
          example: '0'
        description:
          type: string
          format: description
          example: '0'
        billing_category_id:
          type: integer
          format: billing_category_id
          example: '1'
        required_execution:
          type: string
          format: required_execution
          example: 'No'
        reqired_interviewer_exe:
          type: string
          format: reqired_interviewer_exe
          example: 'No'
        brand_id:
          type: integer
          format: brand_id
          example: '7'
        show_financial_fitness:
          type: string
          format: show_financial_fitness
          example: 'No'
        clone_billing_id:
          type: integer
          format: clone_billing_id
          example: '90'
        show_credit_progress_repair:
          type: string
          format: show_credit_progress_repair
          example: 'No'
      type: object
    saveBillingStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Status saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingStatusUpdateRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        is_default:
          type: integer
          format: is_default
          example: '0'
        description:
          type: string
          format: description
          example: '0'
        billing_category_id:
          type: integer
          format: billing_category_id
          example: '1'
        required_execution:
          type: string
          format: required_execution
          example: 'No'
        reqired_interviewer_exe:
          type: string
          format: reqired_interviewer_exe
          example: 'No'
        brand_id:
          type: integer
          format: brand_id
          example: '7'
        show_financial_fitness:
          type: string
          format: show_financial_fitness
          example: 'No'
        clone_billing_id:
          type: integer
          format: clone_billing_id
          example: '90'
        show_credit_progress_repair:
          type: string
          format: show_credit_progress_repair
          example: 'No'
      type: object
    billingStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Status update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingStatusDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Status deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    agreementBillingStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing status for contract listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    postclientAuditsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client audit listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientAgreementsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Agreement listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteClientAgreementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Agreement deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    AdvancedFilteredRequest:
      properties:
        search:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: '1'
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1600'
                type: object
          type: object
      type: object
    getFilteredClientsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Clients filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentPeopleCountResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment clients filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFilteredClientsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client save filter listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientFilterByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client save filter detail successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveClientFilterRequest:
      properties:
        filter_name:
          type: string
          format: filter_name
          example: test
        filter_data:
          type: string
          format: filter_data
          example: ''
        company_id:
          type: integer
          format: company_id
          example: '17'
        filter_user_id:
          type: integer
          format: filter_user_id
          example: '224'
      type: object
    saveClientFilterResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client save filter Added successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateClientFilterRequest:
      properties:
        filter_name:
          type: string
          format: filter_name
          example: test
        filter_data:
          type: string
          format: filter_data
          example: ''
        company_id:
          type: integer
          format: company_id
          example: '17'
        filter_user_id:
          type: integer
          format: filter_user_id
          example: '224'
      type: object
    updateClientFilterResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client filter updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteClientFilterResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client filter delete successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Clients listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client detail listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientItemsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Items listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item detail response successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemNotesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item Notes listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemSequenceTagsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item Sequence Tag listing successfull'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getItemActiveSequenceResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item Active Sequence listing successfull'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    itemDetailsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item detail response successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateItemStatusRequest:
      properties:
        item_type:
          type: integer
          format: item_type
          example: '7'
        status:
          type: string
          format: status
          example: 'The number of late payments is incorrect'
        bureau_type:
          type: integer
          format: bureau_type
          example: equifax
      type: object
    updateItemStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientDocumentsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Documents listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteClientsDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Documents deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addClientsDocumentRequest:
      properties:
        clientId:
          type: integer
          format: clientId
          example: '1600'
        is_active:
          type: integer
          format: is_active
          example: '0'
        description:
          type: string
          format: description
          example: test
        type:
          type: string
          format: type
          example: ''
        upload_as:
          type: string
          format: upload_as
          example: ''
      type: object
    addClientsDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Documents added successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCompanyMilestonesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Company Milestone listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientConstrainedTriggerResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client constrained trigger listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientConstrainedSequenceResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client constrained Sequence listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCompanyClientStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Company client status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    contactStatusListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Contact status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientStatusDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Status details listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveClientStatusRequest:
      properties:
        title:
          type: string
          format: title
          example: 'active,inactive'
        sequence_id:
          type: integer
          format: sequence_id
          example: '20'
        alert_title:
          type: string
          format: alert_title
          example: active
        alert_subtitle:
          type: string
          format: alert_subtitle
          example: active
        alert_enable:
          type: string
          format: alert_enable
          example: '0'
        alert_subtitle_client:
          type: string
          format: alert_subtitle_client
          example: ''
        alert_enable_client:
          type: string
          format: alert_enable_client
          example: '0'
        remove_close_btn:
          type: string
          format: remove_close_btn
          example: '0'
        display_order:
          type: string
          format: display_order
          example: '0'
        alert_hold_client_subtitle:
          type: string
          format: alert_hold_client_subtitle
          example: ''
        alert_hold_client_enable:
          type: string
          format: alert_hold_client_enable
          example: '0'
        payment_btn:
          type: string
          format: payment_btn
          example: '0'
        company_id:
          type: string
          format: company_id
          example: '17'
      type: object
    saveClientStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Status saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    contactStatusUpdateRequest:
      properties:
        title:
          type: string
          format: title
          example: 'active,inactive'
        sequence_id:
          type: integer
          format: sequence_id
          example: '20'
        alert_title:
          type: string
          format: alert_title
          example: active
        alert_subtitle:
          type: string
          format: alert_subtitle
          example: active
        alert_enable:
          type: string
          format: alert_enable
          example: '0'
        alert_subtitle_client:
          type: string
          format: alert_subtitle_client
          example: ''
        alert_enable_client:
          type: string
          format: alert_enable_client
          example: '0'
        remove_close_btn:
          type: string
          format: remove_close_btn
          example: '0'
        display_order:
          type: string
          format: display_order
          example: '0'
        alert_hold_client_subtitle:
          type: string
          format: alert_hold_client_subtitle
          example: ''
        alert_hold_client_enable:
          type: string
          format: alert_hold_client_enable
          example: '0'
        payment_btn:
          type: string
          format: payment_btn
          example: '0'
        company_id:
          type: string
          format: company_id
          example: '17'
      type: object
    contactStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Status update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    clientStatusDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Status deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientLettersResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Letters listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientNotesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Notes listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteClientNotesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Notes deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateClientNoteResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Notes status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    noteAddRequest:
      properties:
        note:
          type: string
          format: note
          example: ''
        flag:
          type: string
          format: flag
          example: ''
        viewable_by_client:
          type: string
          format: viewable_by_client
          example: ''
        category_id:
          type: integer
          format: category_id
          example: ''
        template_id:
          type: integer
          format: template_id
          example: ''
      type: object
    noteAddResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: ' Notes  Added successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    noteEditRequest:
      properties:
        note:
          type: string
          format: note
          example: ''
        flag:
          type: string
          format: flag
          example: ''
        viewable_by_client:
          type: string
          format: viewable_by_client
          example: ''
        category_id:
          type: integer
          format: category_id
          example: ''
        template_id:
          type: integer
          format: template_id
          example: ''
      type: object
    noteEditResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: ' Notes  updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientEmailsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: ' Emails listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    sendEmailRequest:
      properties:
        sender:
          type: string
          format: sender
          example: ''
        subject:
          type: string
          format: subject
          example: ''
      type: object
    sendEmailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client email send successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    companyTriggersByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Trigger listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCompanyTriggerDetaildResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Trigger details listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addCompanyTriggerRequest:
      properties:
        name:
          type: string
          format: name
          example: 'trigger name'
        description:
          type: string
          format: description
          example: description
        type:
          type: integer
          format: type
          example: ''
      type: object
    addCompanyTriggerResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Company trigger saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateCompanyTriggerRequest:
      properties:
        name:
          type: string
          format: name
          example: 'trigger name'
        segment_ids:
          type: string
          format: segment_ids
          example: '[1,2]'
        company_id:
          type: integer
          format: company_id
          example: '17'
        allowed_iterations:
          type: integer
          format: allowed_iterations
          example: '0'
        user_id:
          type: integer
          format: user_id
          example: '224'
        user_cancalled:
          type: integer
          format: user_cancalled
          example: '1'
        type:
          type: integer
          format: type
          example: '1'
        prevent_concurrent:
          type: integer
          format: prevent_concurrent
          example: '0'
        steps:
          type: integer
          format: steps
          example: '0'
        flow_data:
          type: integer
          format: flow_data
          example: '0'
      type: object
    updateCompanyTriggerResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Company trigger updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateWorkflowStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Update workflow status successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTaskssResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tasks listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteClientTasksResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Task deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTaskTagsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tasks listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    dropBoxSettngsTaskslRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        desc:
          type: string
          format: desc
          example: test
        dueDays:
          type: integer
          format: dueDays
          example: '2'
        status:
          type: integer
          format: status
          example: '0'
        task_priority:
          type: integer
          format: task_priority
          example: '0'
        tags:
          type: string
          format: tags
          example: ''
      type: object
    dropBoxSettngsTasksResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Dropbox setting saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getDropboxDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Dropbox Detail listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addNewTasksRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        description:
          type: string
          format: description
          example: test
        associated_client:
          type: string
          format: associated_client
          example: ''
        user_id:
          type: integer
          format: user_id
          example: '224'
        task_hour:
          type: integer
          format: task_hour
          example: ''
        task_minute:
          type: integer
          format: task_minute
          example: ''
        task_am_pm:
          type: string
          format: task_am_pm
          example: ''
        duedate:
          type: string
          format: duedate
          example: ''
        status:
          type: integer
          format: status
          example: ''
        task_priority:
          type: integer
          format: task_priority
          example: ''
        tags:
          type: integer
          format: tags
          example: ''
      type: object
    addNewTasksResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteAllCheckedTaskRequest:
      properties:
        task_ids:
          type: string
          format: task_ids
          example: '[17,18]'
      type: object
    deleteAllCheckedTaskResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'All checked IDs Task deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getMyTaskListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'My Tasks listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addUserToTaskRequest:
      properties:
        task_ids:
          type: string
          format: task_ids
          example: "['1','2]"
        user_id:
          type: integer
          format: user_id
          example: '224'
      type: object
    addUserToTaskResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'The user has been successfully added to the task.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTaskTagsListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task Tags listed successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    associatedClientResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Associated Clients listed successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTaskActivityListsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tasks Activity listing successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteUserFromTaskResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task user deleted successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getUsersResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Users listing successfully.'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    reviewResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client Review listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientSmsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Sms listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    sendSMSRequest:
      properties:
        template_id:
          type: integer
          format: template_id
          example: ''
        number:
          type: integer
          format: number
          example: ''
      type: object
    sendSMSResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client sms send saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    monitoringSiteListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Monitoring site filter listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getReportSourceResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Monitoring site listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addReportingResourcesRequest:
      properties:
        company_id:
          type: integer
          format: company_id
          example: '17'
        name:
          type: string
          format: name
          example: testing
        login_url:
          type: string
          format: login_url
          example: 'http://char.com'
        model:
          type: string
          format: model
          example: 'testing model'
        description:
          type: string
          format: description
          example: testing
      type: object
    addReportingResourcesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Reporting resources saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateReportingResourcesRequest:
      properties:
        company_id:
          type: integer
          format: company_id
          example: '17'
        name:
          type: string
          format: name
          example: testing
        login_url:
          type: string
          format: login_url
          example: 'http://char.com'
        model:
          type: string
          format: model
          example: 'testing model'
        description:
          type: string
          format: description
          example: testing
      type: object
    updateReportingResourcesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Reporting resources update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteReportingResourcesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Reporting resources deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getSequenceListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Sequence listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addSequenceRequest:
      properties:
        name:
          type: string
          format: name
          example: testing
        type:
          type: integer
          format: type
          example: '1'
        sequence_status:
          type: integer
          format: sequence_status
          example: '1'
        inloop:
          type: integer
          format: inloop
          example: '1'
        allowed_instances:
          type: integer
          format: allowed_instances
          example: '1'
        prevent_concurrent:
          type: integer
          format: prevent_concurrent
          example: '1'
        sequence_desc:
          type: integer
          format: sequence_desc
          example: testing
      type: object
    addSequenceResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Sequence saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateSequenceByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Sequence updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getStatesListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'States listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTagsListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'tags listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    showtagDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'tag details listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskTagsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task tags listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addTaskTagRequest:
      properties:
        name:
          type: string
          format: name
          example: testing
        hex:
          type: string
          format: hex
          example: '1'
      type: object
    addTaskTagResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'New task tag add successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateTaskTagByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task tag updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskTagDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task tag deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getWorkflowListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflows filter listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    workflowStatusUpdateRequest:
      properties:
        sequence_status:
          type: string
          format: sequence_status
          example: '1'
        updated_by:
          type: integer
          format: updated_by
          example: '224'
      type: object
    workflowStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflows filter updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    workflowDestroyRequest:
      properties:
        deleted:
          type: integer
          format: deleted
          example: '1'
        updated_by:
          type: integer
          format: updated_by
          example: '224'
      type: object
    workflowDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflows filter deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    workflowFilterResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflows filter listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    workflowArchiveRequest:
      properties:
        deleted:
          type: integer
          format: deleted
          example: '1'
        updated_by:
          type: integer
          format: updated_by
          example: '224'
      type: object
    workflowArchiveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Archived/unarchived workflow updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAccountStatusRequest:
      properties:
        search:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: '1'
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1'
                type: object
          type: object
      type: object
    getAccountStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveAccountStatusRequest:
      properties:
        status:
          type: string
          format: status
          example: ''
      type: object
    saveAccountStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Status saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    accountStatusUpdateRequest:
      properties:
        status:
          type: string
          format: status
          example: ''
      type: object
    accountStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    accountStatusDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Status deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllAccountStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account Status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAccountTypesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account types listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveAccountTypeRequest:
      properties:
        type:
          type: string
          format: type
          example: 'Credit Card'
      type: object
    saveAccountTypeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account types listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    AccountTypeUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account types listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    accountTypesDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account types deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllAccountTypesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Account types listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    agreementSnippitsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippits filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addAgreementSnippitRequest:
      properties:
        title:
          type: string
          format: title
          example: test
        description:
          type: string
          format: description
          example: test
        content:
          type: string
          format: content
          example: ''
      type: object
    addAgreementSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippits saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateAgreementSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippits updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    destroySnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippits deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    previewSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippits preview successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    stateSnippitsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'State snippit filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addStateSnippitRequest:
      properties:
        title:
          type: string
          format: title
          example: test
        description:
          type: string
          format: description
          example: test
        content:
          type: string
          format: content
          example: ''
        state_id:
          type: integer
          format: state_id
          example: '1'
      type: object
    addStateSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement state snippit saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateStateSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement state snippit updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    destroyStateSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'State snippits deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    previewStateSnippittResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippit preview successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement snippit preview successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getStateSnippitResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'State agreement snippit listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAttestationSectionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Attestation Section listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveAttestationSectionRequest:
      properties:
        attestation_section_value:
          type: string
          format: attestation_section_value
          example: ''
      type: object
    saveAttestationSectionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Attestation Section saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    attestationSectionUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Attestation Section updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    attestationSectionDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Attestation Section deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllAttestationSectionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Attestation Section listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    batchPrintListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Batch print listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBatchPrintRequest:
      properties:
        client_id_print:
          type: integer
          format: client_id_print
          example: ''
        file:
          type: string
          format: binary
          example: 'File to upload'
        type:
          type: string
          format: type
          example: test
      type: object
    saveBatchPrintResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Batch print saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getPendingBatchPrintsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Pending batch print listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    statusUpdateBatchPrintResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Update batch print saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBatchPrintSettingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Batch print setting detail listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBatchPrintSettingRequest:
      properties:
        batch_print:
          type: string
          format: batch_print
          example: test
      type: object
    saveBatchPrintSettingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Batch print setting detail listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingCategoriesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBillingCategoryRequest:
      properties:
        status:
          type: string
          format: status
          example: test
      type: object
    saveBillingCategoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Category saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingCategoryUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Category updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingCategoryDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Category deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    billingCategoriesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Billing Category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    brandsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Brands listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBrandRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        uri:
          type: string
          format: uri
          example: ''
        brand_email:
          type: string
          format: brand_email
          example: ''
        brand_phone:
          type: integer
          format: brand_phone
          example: ''
        status:
          type: integer
          format: status
          example: '1'
        footer_title:
          type: string
          format: footer_title
          example: '1'
        template_header_name:
          type: string
          format: template_header_name
          example: ''
        template_footer_name:
          type: string
          format: template_footer_name
          example: ''
        privacy_policy:
          type: string
          format: privacy_policy
          example: ''
        terms_of_use:
          type: string
          format: terms_of_use
          example: ''
        company_address:
          type: string
          format: company_address
          example: ''
        rc_widget:
          type: string
          format: rc_widget
          example: ''
      type: object
    saveBrandResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Brands saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    brandUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Brands updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateBrandStatusRequest:
      properties:
        status:
          type: integer
          format: status
          example: ''
      type: object
    updateBrandStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Brand Status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    bureauAddressListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau address listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBureauDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau address Detail listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveBureauAddressRequest:
      properties:
        bureau:
          type: string
          format: bureau
          example: '(transunion,equifax,and experian)'
        address:
          type: string
          format: address
          example: 'Box 2000'
        city:
          type: string
          format: city
          example: 'Box AL'
        state:
          type: string
          format: state
          example: ''
        zip:
          type: number
          format: zip
          example: ''
        fax_no:
          type: number
          format: fax_no
          example: '1234567890'
        default:
          type: integer
          format: default
          example: '1'
      type: object
    saveBureauAddressResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau Address saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updatebureauAddressResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau Address update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    bureauAddressDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau Address deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    skipAuthResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client skip auth successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    importAccountReportRequest:
      properties:
        transunion:
          type: integer
          format: transunion
          example: ''
        experian:
          type: integer
          format: experian
          example: ''
        equifax:
          type: integer
          format: equifax
          example: ''
        vendor:
          type: integer
          format: vendor
          example: ''
      type: object
    importAccountReportResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client import account report saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getCollectionStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Collection Status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveCollectionStatusRequest:
      properties:
        name:
          type: string
          format: name
          example: ''
      type: object
    saveCollectionStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Collection Status saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    collectionStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Collection Status update successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    collectionStatusDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Collection Status deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllCollectionStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Collection Status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    reassignAgreementListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Reassign Agreement listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAgreementListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addNewAgreementRequest:
      properties:
        name:
          type: string
          format: name
          example: ''
        form:
          type: string
          format: form
          example: ''
        description:
          type: string
          format: description
          example: ''
        billing_status_id:
          type: integer
          format: billing_status_id
          example: ''
        set_as_default:
          type: integer
          format: set_as_default
          example: ''
        poa_list:
          type: integer
          format: poa_list
          example: ''
      type: object
    addNewAgreementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    agreementUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    previewAgreementeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement details listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    destroyAgreementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Agreement deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    csvCronListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Csv cron successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    csvToolsUploadRequest:
      properties:
        update_option:
          type: string
          format: update_option
          example: ''
        csv_file:
          type: string
          format: binary
          example: ''
        status_id:
          type: integer
          format: status_id
          example: ''
        billing_status_id:
          type: integer
          format: billing_status_id
          example: ''
        state_id:
          type: integer
          format: state_id
          example: ''
      type: object
    csvToolsUploadResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Upload csv tools successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFaxLogResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Upload csv tools successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    faxLogDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Fax Log deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    faxFurnisherSearchResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Fax Furnishers listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    faxBureauSearchResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Fax bureau listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getBureauResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Bureau details successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFurnisherResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Furnisher details successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getFaxSettingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Fax Setting Retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    faxSettingUpdateByIdRequest:
      properties:
        username:
          type: string
          format: username
          example: ''
        password:
          type: string
          format: password
          example: ''
        tagname:
          type: string
          format: tagname
          example: ''
        company:
          type: string
          format: company
          example: ''
      type: object
    faxSettingUpdateByIdResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Fax Setting updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClaimCodeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Claim code listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    instructionListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveInstructionRequest:
      properties:
        instruction:
          type: string
          format: instruction
          example: 'The number of late payments is incorrect'
        claim_code:
          type: string
          format: claim_code
          example: F2
      type: object
    saveInstructionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    instructionUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    instructionDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    instructionOrderUpdateRequest:
      properties:
        display_order:
          type: string
          format: display_order
          example: ''
      type: object
    instructionOrderUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction order  updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllInstructionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Instruction listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addItemRequest:
      properties:
        item_type:
          type: integer
          format: item_type
          example: '1'
        bureau:
          type: string
          format: bureau
          example: transunion
      type: object
    addItemResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateItemResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Item updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    noteCategoriesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Note Category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    noteTemplatesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Note templates listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getPublicRecordStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Status listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    savePublicRecordStatusRequest:
      properties:
        name:
          type: string
          format: name
          example: ''
      type: object
    savePublicRecordStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Status saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    publicRecordStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    publicRecordStatusDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Status deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllPublicRecordStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Status listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getPublicRecordTypeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record types listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    savePublicRecordTypeRequest:
      properties:
        type:
          type: string
          format: type
          example: 'State Tax'
      type: object
    savePublicRecordTypeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record types saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    publicRecordTypeUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record types updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    publicRecordTypesDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record types deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getAllPublicRecordTypesResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Public Record Types listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    menuPagesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Page menus listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getPageRolePermissionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Page permission listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    rolesManagementResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Roles listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    rolesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Roles listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addRolePermissionRequest:
      properties:
        role_name:
          type: string
          format: role_name
          example: ''
        permission:
          type: string
          format: permission
          example: ''
      type: object
    addRolePermissionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Role permission saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateRolePermissionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Role permission updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteRolePermissionResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Role permission deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getSegmentCategoryListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segments Category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentCategorySaveRequest:
      properties:
        name:
          type: string
          format: name
          example: activity
        created_by:
          type: string
          format: created_by
          example: '95'
      type: object
    segmentCategorySaveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segments Category saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segments listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getSegmentDetailResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment details listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentUpdateRequest:
      properties:
        title:
          type: string
          format: title
          example: 'testing filter'
        description:
          type: string
          format: description
          example: 'testing filter'
        segment_category:
          type: integer
          format: segment_category
          example: '0'
        conditions:
          properties:
            combinator:
              type: string
              example: and
            rules:
              type: array
              items:
                properties:
                  id:
                    type: string
                    example: 33d35b2b-f665-4c27-aa0c-64e69f8a29ca
                  field:
                    type: string
                    example: id
                  operator:
                    type: string
                    example: equal
                  valueSource:
                    type: string
                    example: value
                  value:
                    type: string
                    example: '1600'
                type: object
          type: object
        created_by:
          type: integer
          format: created_by
          example: '224'
      type: object
    segmentUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflow segment updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentSaveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Workflow segment saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentOnWorkflowResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment workflow details listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentArchiveRequest:
      properties:
        status:
          type: integer
          format: status
          example: '1'
      type: object
    segmentArchiveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Archived/unarchived segment updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    segmentDeleteResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getClientSegmentsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client segments listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskCategoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveTaskCategoryRequest:
      properties:
        name:
          type: string
          format: name
          example: test
        send_to_dropbox:
          type: string
          format: send_to_dropbox
          example: ''
        dropbox_folder:
          type: string
          format: dropbox_folder
          example: ''
      type: object
    saveTaskCategoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task category saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskCategoryUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task category updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskCategoryDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task category deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskDropboxCategoryRequest:
      properties:
        send_to_dropbox:
          type: string
          format: send_to_dropbox
          example: ''
        dropbox_folder:
          type: string
          format: dropbox_folder
          example: ''
      type: object
    taskDropboxCategoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task dropdown category updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskCategoryListResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    manageResultTagResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task result tag listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveResultTagsRequest:
      properties:
        manage_tags:
          type: string
          format: manage_tags
          example: ''
      type: object
    saveResultTagsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    uploadDocumentRequest:
      properties:
        associated_client:
          type: string
          format: associated_client
          example: ''
        is_active:
          type: string
          format: is_active
          example: ''
        description:
          type: string
          format: description
          example: ''
        type:
          type: string
          format: type
          example: ''
        upload_as:
          type: string
          format: upload_as
          example: ''
        results_tags:
          type: string
          format: results_tags
          example: ''
      type: object
    uploadDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Document uploaded as a client document saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    removeDocFromClientDocumentRequest:
      properties:
        project_file_id:
          type: integer
          format: project_file_id
          example: ''
        client_doc_id:
          type: integer
          format: client_doc_id
          example: ''
        description:
          type: string
          format: description
          example: ''
        type:
          type: string
          format: type
          example: ''
        upload_as:
          type: string
          format: upload_as
          example: ''
        results_tags:
          type: string
          format: results_tags
          example: ''
      type: object
    removeDocFromClientDocumentResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client document remove successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskDetailsResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task details listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskStatusUpdateRequest:
      properties:
        status:
          type: integer
          format: status
          example: ''
      type: object
    taskStatusUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addObjectiveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task objectives saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskObjectiveUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task objectives updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addObjectiveRequest:
      properties:
        task_id:
          type: integer
          format: task_id
          example: ''
        name:
          type: string
          format: name
          example: ''
        description:
          type: string
          format: description
          example: ''
        status:
          type: string
          format: status
          example: ''
      type: object
    destroyObjectiveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task objectives deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    markCompleteObjectiveResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task objective mark as completed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    storeMessageRequest:
      properties:
        comment:
          type: string
          format: comment
          example: ''
        userid:
          type: integer
          format: userid
          example: ''
        taskId:
          type: integer
          format: taskId
          example: ''
      type: object
    destroyMessageResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task message deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskUpdateRequest:
      properties:
        name:
          type: string
          format: name
          example: ''
        description:
          type: string
          format: description
          example: ''
        duedate:
          type: string
          format: duedate
          example: ''
        duetime:
          type: string
          format: duetime
          example: ''
        complete:
          type: integer
          format: complete
          example: ''
        complete_sync:
          type: integer
          format: complete_sync
          example: ''
        associated_client:
          type: integer
          format: associated_client
          example: ''
      type: object
    taskUpdateeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task detail updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    taskFileUploadRequest:
      properties:
        file:
          type: string
          format: binary
          example: ''
        catid:
          type: integer
          format: catid
          example: ''
        name:
          type: string
          format: name
          example: ''
      type: object
    taskFileUploadResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task file uploaded successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    removeFileResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task file deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    assignTaskTagRequest:
      properties:
        tags:
          type: string
          format: tags
          example: ''
      type: object
    assignTaskTagResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task tags updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    changeDocumentStatusRequest:
      properties:
        task_id:
          type: integer
          format: task_id
          example: ''
        status:
          type: integer
          format: status
          example: ''
      type: object
    changeDocumentStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task document status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveDocumentCatRequest:
      properties:
        catid:
          type: integer
          format: catid
          example: ''
      type: object
    saveDocumentCatResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task document category updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    storeMessageResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Task message saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    tasksListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Tasks retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    TemplateCategoryResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Template Category listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTemplatesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Template listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTemplatesByTypeResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Template listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTemplatesByTypeAndCatResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Templates retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    getTemplatesTypeListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Templates Filter listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    deleteTemplateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Templates deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    previewTemplateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Preview Templates Detail successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    storeTemplateRequest:
      properties:
        name:
          type: string
          format: name
          example: testing
        description:
          type: string
          format: description
          example: testing
        body:
          type: string
          format: body
          example: '<p>[FOOTER_TITLE]</p>\n<p>[HEADER_TITLE]</p>\n<p>[Customer First Name][Customer Last Name][Customer SSN][Customer DOB][Customer Address Line 1][Customer Address Line 2][Customer City],[Customer State][Customer Zip]</p>'
        category:
          type: integer
          format: category
          example: '9'
        type:
          type: integer
          format: type
          example: '0'
        templateInquiry:
          type: integer
          format: templateInquiry
          example: '1'
        user_id:
          type: integer
          format: user_id
          example: '224'
      type: object
    storeTemplateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Template saved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateTemplateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Template updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    enqueueBatchPrintResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Pending batch print listed successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    usersFilterListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User management filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addNewUserRequest:
      properties:
        first_name:
          type: string
          format: first_name
          example: ''
        last_name:
          type: string
          format: last_name
          example: ''
        phone:
          type: string
          format: phone
          example: ''
        email:
          type: string
          format: email
          example: ''
        password:
          type: string
          format: password
          example: ''
        email_opt:
          type: integer
          format: email_opt
          example: ''
        ip_address_status:
          type: integer
          format: ip_address_status
          example: ''
        user_ip_address:
          type: string
          format: user_ip_address
          example: ''
        role_id:
          type: string
          format: role_id
          example: ''
        google_2fa:
          type: string
          format: google_2fa
          example: ''
      type: object
    addNewUserResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User management filtered successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    userUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    userPasswordResetRequest:
      properties:
        old_password:
          type: string
          format: old_password
          example: ''
        password:
          type: string
          format: password
          example: ''
        password_confirmation:
          type: string
          format: password_confirmation
          example: ''
      type: object
    userPasswordResetResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User password reset  successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    updateStatusRequest:
      properties:
        status_id:
          type: string
          format: status_id
          example: ''
      type: object
    updateStatusResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'User status updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    wordphrasesListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Wordphrases listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    saveWordphraseRequest:
      properties:
        content:
          type: string
          format: content
          example: ''
      type: object
    saveWordphraseResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Wordphrases save successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    wordphraseUpdateResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Wordphrases updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    wordphrasesDestroyResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Wordphrases deleted successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    workflowSegmentClientCountResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Segment workflow client count retrieved successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    addClientRequest:
      properties:
        authKey:
          type: string
          format: authKey
          example: Card
        firstName:
          type: string
          format: firstName
          example: test
        lastName:
          type: string
          format: lastName
          example: test
        email:
          type: string
          format: email
          example: ''
        salesForceId:
          type: string
          format: salesForceId
          example: ''
        status:
          type: string
          format: status
          example: '3'
        billingStatus:
          type: string
          format: billingStatus
          example: '3'
        state:
          type: string
          format: state
          example: '3'
      type: object
    addClientResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client added successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    editClientResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    upsertClientResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Client added/updated successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
    printsListingResponse200:
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Prints listing successfully'
        code:
          type: integer
          example: 200
        results:
          type: object
      type: object
  responses:
    200:
      description: 'Account Responsibilities listing successfully'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getAccountResponsibilitiesResponse200'
    401:
      description: Unauthorized
  parameters:
    sort_column:
      name: sort_column
      in: query
      description: 'sort_column field (e.g., id)'
      required: true
      schema:
        type: string
    sort_direction:
      name: sort_direction
      in: query
      description: 'Sort direction (asc or desc)'
      required: true
      schema:
        type: string
        enum:
          - asc
          - desc
    page:
      name: page
      in: query
      description: 'Page number (e.g., 1)'
      required: true
      schema:
        type: integer
    perpage:
      name: perpage
      in: query
      description: 'Items per page (e.g., 10)'
      required: true
      schema:
        type: integer
    x-api-key:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
  requestBodies:
    getAccountResponsibilityRequest:
      description: 'Resource data'
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/getAccountResponsibilityRequest'
  securitySchemes:
    api_key:
      type: apiKey
      description: 'API Key needed to access the endpoints.'
      name: x-api-key
      in: header
tags:
  -
    name: 'Account Responsibilities'
    description: 'Account Responsibilities API'
  -
    name: 'Client Agreement'
    description: 'This category contains endpoints manage client related agreements that are stored in the TCP for operational purposes.'
  -
    name: Activity
    description: 'Endpoints within this category pertain to client activities, encompassing both routine actions and those associated with exports'
  -
    name: 'Client Letters'
    description: 'Client Letters APIs'
  -
    name: Audits
    description: 'This category contains endpoints related to the user audit logs retrieved to monitor the user activities across the board.'
  -
    name: 'Client Review'
    description: 'Portal Client related reviews that are left over the portal as feedback are managed under this category'
  -
    name: 'Task detail'
    description: 'All Task detail Apis.'
  -
    name: 'Client Document'
    description: 'This category consist of managing operations for client related documents.'
  -
    name: Login
    description: 'The login category will encompass endpoints associated with user authentication. It involves presenting a valid token, along with operations related to refresh and OTPs.'
  -
    name: Logout
    description: 'The logout category contains user operations endpoint to logout a valid logged in users'
  -
    name: 'Billing Status'
    description: 'Billing related endpoints will be available under this category'
  -
    name: Clients
    description: 'Endpoint under this category are related to clients day to day operational process.'
  -
    name: 'Clients Segment'
    description: 'Clients Segment API'
  -
    name: 'Client Items'
    description: 'Endpoint under this category are related to client related items relatedable to there relevant operational activities.'
  -
    name: 'Company Milestone'
    description: 'Endpoints under this category enables developers to retrieve ongoing company milestones.'
  -
    name: 'Client Workflow'
    description: 'This category of endpoints are related to workflows related details for the specified clients'
  -
    name: 'Company Client Status'
    description: 'This category hold endpoints to retrieve clients status based on the company credentials used for authentication.'
  -
    name: 'Client Notes'
    description: 'Client Notes are additional information generated by clients for there operational information purposese. This category consist of relevant endpoints for client notes.'
  -
    name: 'Client Email'
    description: 'Endpoint in this category retrieves clients email as per the request.'
  -
    name: 'Company Trigger'
    description: 'All company related triggers to perform certain actions are manageable.'
  -
    name: 'Client Tasks'
    description: 'This category groups ongoing client related tasks and there management.'
  -
    name: Users
    description: 'User operational related points falls under this category.'
  -
    name: 'Client SMS'
    description: 'Endpoints under this are used to manage client related communication done over SMS.'
  -
    name: 'Monitoring Site'
    description: 'Endpoints here are related to Monitoring Sites related to consumers.'
  -
    name: Sequence
    description: 'Endpoint to manage sequence listing against a company are handled through these endpoints.'
  -
    name: States
    description: 'Cagtegory consist of endpoint to retrieve national states for operations purposes.'
  -
    name: Tags
    description: 'Tags related endpoint which acts as idenfiers are managed through this category.'
  -
    name: 'Account Status'
    description: 'Account Status APIS'
  -
    name: 'Account Type'
    description: 'Account Type APIS'
  -
    name: Snippits
    description: 'All Snippits APIS '
  -
    name: 'Attestation Section'
    description: 'All Attestation Section APIS '
  -
    name: 'Batch Prints'
    description: 'All Batch Prints APIS '
  -
    name: 'Billing Category'
    description: 'All Billing Category APIS '
  -
    name: Brands
    description: 'All Brands APIS '
  -
    name: 'Bureau Address'
    description: 'All Bureau Address APIS '
  -
    name: 'Collection Status'
    description: 'All Collection Status APIS '
  -
    name: 'Company Agreement'
    description: 'All Company Agreements APIS '
  -
    name: 'Csv Cron'
    description: 'All Csv Cron APIS '
  -
    name: 'Fax Log'
    description: 'All Fax Log and Fax setting APIS '
  -
    name: Instruction
    description: 'All Instruction APIS '
  -
    name: 'Note Category'
    description: 'All Note Category APIS '
  -
    name: 'Public Record Status'
    description: 'All Public Record Status APIS '
  -
    name: 'Public Record Types'
    description: 'All Public Record Types APIS '
  -
    name: 'Roles Permission'
    description: 'All Roles Permissions APIS '
  -
    name: 'Segment Category'
    description: 'All Segment Category APIS '
  -
    name: 'Task Category'
    description: 'All Task Category APIS'
  -
    name: 'Word Phrases'
    description: 'All Word Phrases APIS'
  -
    name: Segments
    description: 'All Segments APIS'
  -
    name: Templates
    description: 'All Templates APIS'